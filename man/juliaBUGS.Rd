% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/juliabugs.R
\name{juliaBUGS}
\alias{juliaBUGS}
\title{Run a Julia HMC Sampler for a BUGS-like Probabilistic Model}
\usage{
juliaBUGS(
  data,
  model,
  params_to_save,
  name = "sampler_juliaBUGS",
  n_iter = 2000,
  n_warmup = floor(n_iter/2),
  n_discard = n_warmup,
  n_thin = 1,
  n_chain = 1,
  use_parallel = TRUE,
  posterior_type = "array",
  force_setup_juliaBUGS = FALSE,
  control = NULL,
  ...
)
}
\arguments{
\item{data}{A named list of numeric values (integer or double). All elements must be named.}

\item{model}{A character string with the model definition, either in Julia-compatible format or BUGS syntax.}

\item{params_to_save}{Character vector with the names of model parameters to extract from the sampler output.}

\item{name}{Character. Name for the sampler object created in Julia (must be a valid Julia variable name).}

\item{n_iter}{Integer. Total number of MCMC iterations. Default is 2000.}

\item{n_warmup}{Integer. Number of warm-up iterations. Default is `floor(n_iter / 2)`.}

\item{n_discard}{Integer. Number of initial samples to discard. Default is `n_warmup`.}

\item{n_thin}{Integer. Thinning interval. Default is 1 (no thinning).}

\item{n_chain}{Integer. Number of MCMC chains. Default is 1.}

\item{use_parallel}{Logical. Whether to use `AbstractMCMC.MCMCThreads()` for parallel sampling. Default is `TRUE`.}

\item{posterior_type}{Character. Format of the posterior samples. One of `"array"`, `"rvar"`, `"mcmc"`, or `"draws"`. Default is `"array"`.}

\item{force_setup_juliaBUGS}{Logical. If `TRUE`, forces reinitialization of the Julia environment via `setup_juliaBUGS()`. Default is `FALSE`.}

\item{control}{Optional list of control parameters. Supported entries:
\describe{
  \item{`data_convert_int`}{Logical. If `TRUE`, coerces numeric values to integers when possible. Default is `TRUE`.}
  \item{`convert_var_name`}{Logical. If `TRUE`, automatically renames variables in the BUGS model. Default is `FALSE`.}
  \item{`julia_model`}{Logical. If `TRUE`, assumes the model is already in Julia format. Default is `FALSE`.}
}}

\item{...}{Additional arguments passed to `setup_juliaBUGS()`.}
}
\value{
An object of class `"rjuliabugs"` containing:
\describe{
  \item{params}{Posterior samples, in the format specified by `posterior_type`.}
  \item{name}{Character string identifying the Julia sampler object.}
  \item{sampler}{Sampler object returned by `AbstractMCMC.sample`.}
  \item{n_threads}{Number of Julia threads detected.}
  \item{mcmc}{List of MCMC configuration parameters.}
  \item{control}{Control options used in the sampler setup.}
}
}
\description{
Executes a Hamiltonian Monte Carlo (HMC) sampler in Julia from R, using a model
specified in Julia or in BUGS syntax. It compiles the model, converts data,
sets sampler parameters, and returns posterior samples in various formats.
}
\details{
This function relies on Julia packages `LogDensityProblems`, `AdvancedHMC`, and `AbstractMCMC`.
Gradients are computed via `ReverseDiff`. The model is compiled before sampling.

The `posterior_type` argument determines the return format:
\itemize{
  \item `"array"`: 3D numeric array (iterations × chains × parameters).
  \item `"rvar"`: `posterior::rvar` object.
  \item `"mcmc"`: `coda::mcmc` (single chain) or `mcmc.list` (multiple chains).
  \item `"draws"`: `posterior::draws_array`.
}
}
\note{
You must call `setup_juliaBUGS()` at least once before using this function.
If parallel sampling is requested but only one Julia thread is available,
a warning is issued and sampling will run serially.
}
\examples{
\dontrun{
model <- "model = @model ... end"
data <- list(N = 10, x = rnorm(10))
result <- juliaBUGS(
  data = data,
  model = model,
  params_to_save = c("mu"),
  name = "my_sampler"
)
}

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/juliabugs.R
\name{juliaBUGS}
\alias{juliaBUGS}
\title{Run a Julia MCMC Sampler from R using a Custom BUGS-like Model}
\usage{
juliaBUGS(
  data,
  model,
  n_iter = 2000,
  n_warmup = floor(n_iter/2),
  n_discard = n_warmup,
  n_thin = 1,
  params_to_save = NULL,
  control = NULL
)
}
\arguments{
\item{data}{A named list of data to be passed to the model. Each element must be numeric or integer. Names are required.}

\item{model}{A character string representing the Julia model definition. Must be a valid expression in Julia.}

\item{n_iter}{Integer. Number of total MCMC iterations. Default is 2000.}

\item{n_warmup}{Integer. Number of warm-up (adaptation) iterations. Default is `floor(n_iter / 2)`.}

\item{n_discard}{Integer. Number of initial samples to discard. Default is `n_warmup`.}

\item{n_thin}{Integer. Thinning interval for saving samples. Default is 1 (no thinning).}

\item{params_to_save}{Optional character vector. Names of model parameters to extract from the Julia sampler. Must match identifiers in the `model` string.}

\item{control}{Optional list of control parameters. Currently supports:
- `data_convert_int`: Logical. Whether to attempt converting numeric values to integers if they are whole numbers. Default is `TRUE`.}
}
\value{
An object of class `"rjuliabugs"` containing:
\describe{
  \item{params}{A named list of posterior samples for the selected parameters.}
  \item{sampler}{The full Julia `Chains` object with all samples.}
}
}
\description{
This function sets up and runs a Hamiltonian Monte Carlo (HMC) sampler from Julia using a user-defined probabilistic model.
It handles data validation, automatic type conversion for Julia, and allows parameter selection for posterior sampling.
}
\details{
This function sets up and compiles the model in Julia, uses ReverseDiff for gradient calculations,
and samples using `AdvancedHMC.NUTS`. It assumes the Julia environment has already been initialized with
the necessary packages (`LogDensityProblems`, `AdvancedHMC`, `AbstractMCMC`, etc.).
}
\note{
You must call `setup_juliaBUGS()` before using this function to initialize the Julia environment
and load dependencies. This function assumes that the Julia environment and model are correctly configured.
}
\examples{
\dontrun{
model <- "model = @model ... end"
data <- list(N = 10, x = rnorm(10))
result <- juliaBUGS(data = data, model = model, params_to_save = c("mu"))
}

}

[{"path":"https://mateusmaiads.github.io/rjuliabugs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rjuliabugs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"Many R users already work either probabilistic programming languages open statistical software, JAGS (Plummer, 2003), Nimble (de Valpine et al., 2017, 2024a, 2024b) Stan (Carpenter et al., 2017, Stan; Stan Development Team., 2024) fit Bayesian models. Although tools uses different syntax inference algorithms, statistical model usually similar — changes model expressed computational backend fits – including sampler MCMC methodology used obtain posterior. rjuliabugs extends ecosystem providing interface R JuliaBUGS, Julia implementation BUGS also enables use advanced samplers Hamiltonian Monte Carlo (HMC) maintaining familiar BUGS syntax. JuliaBUGS uses BUGS syntax, model specified JAGS Nimble can typically run rjuliabugs little modification. Models originally written languages, Stan, can also translated BUGS form executed rjuliabugs. vignette section, : Start model — classic Eight Schools hierarchical model (Rubin, 1981). Show original forms Stan, JAGS, Nimble, run R. Translate version equivalent BUGS code use rjuliabugs. Compare outputs verify translation preserves statistical meaning model. end, users familiar Stan, JAGS, Nimble see exactly adapt existing model code run rjuliabugs staying entirely R.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"data-setup","dir":"Articles","previous_headings":"","what":"Data Setup","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"Eight Schools example evaluates effects coaching program SAT scores across eight different schools. school j=1,…,8j = 1, \\dots, 8, estimated treatment effect yjy_j standard error σj\\sigma_j. data follows:","code":"# Setting a seed set.seed(42)  J <- 8 y <- c(28, 8, -3, 7, -1, 1, 18, 12)          # estimated treatment effects sigma <- c(15, 10, 16, 11, 9, 11, 10, 18)   # standard errors data_list <- list(J = J, y = y, sigma = sigma)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"use non-centered parameterization hierarchical model. - Observation model: yj∼Normal(θj,σj2)y_j \\sim \\mbox{Normal}(\\theta_j, \\sigma_j^2) - Non-centered prior: θj=μ+τ⋅ηj,ηj∼Normal(0,1)\\theta_j = \\mu + \\tau \\cdot \\eta_j, \\eta_j \\sim \\mbox{Normal}(0,1) - Weakly informative priors: μ∼Normal(0,10)\\mu \\sim \\mbox{Normal}(0, 10), τ∼Uniform(0,25)\\tau \\sim \\mbox{Uniform}(0, 25) Summarising model setup : yj∣θj∼Normal(θj,σj2),j=1,…,8θj=μ+τηj,ηj∼Normal(0,1)μ∼Normal(0,10)τ∼Uniform(0,25) \\begin{aligned} y_j \\mid \\theta_j &\\sim \\mbox{Normal}(\\theta_j, \\sigma_j^2), \\quad j = 1, \\dots, 8 \\\\ \\theta_j &= \\mu + \\tau \\eta_j, \\quad \\eta_j \\sim \\mbox{Normal}(0,1) \\\\ \\mu &\\sim \\mbox{Normal}(0, 10) \\\\ \\tau &\\sim \\mbox{Uniform}(0, 25) \\end{aligned} Now describe hierarchical Eight Schools model can defined different probabilistic programming languages (PPLs) accessed R: Stan, BUGS/JAGS, Nimble, JuliaBUGS. PPL, use respective R interfaces: rstan (alternatively cmdstanr), R2jags rjags, nimble, rjuliabugs. also illustrate access posterior samples R, provide small visualization parameter estimates using bayesplot consistency.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"stan-rstan","dir":"Articles","previous_headings":"Model Specification","what":"Stan (rstan)","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"Stan uses domain-specific modeling language. Models written strings (separate .stan files) compiled C++ efficient sampling. Minimal modifications needed define priors, likelihood, transformed parameters. Posterior samples can accessed via rstan::extract(fit_stan). visualize use bayesplot package.","code":"library(rstan)  stan_model_string <- \" data {   int<lower=0> J;   real y[J];   real<lower=0> sigma[J]; } parameters {   real mu;   real<lower=0> tau;   vector[J] eta; } transformed parameters {   vector[J] theta = mu + tau * eta; } model {   eta ~ normal(0, 1);   y ~ normal(theta, sigma);   mu ~ normal(0, 10);   tau ~ uniform(0, 25); } \"  # Fitting the model fit_stan <- stan(model_code = stan_model_string,                  data = data_list,                   iter = 2000,                   chains = 4)  # To obtain the posterior samples we can use rstan::extract() -- but it is return as a list stan_posterior_samples <- rstan::extract(fit_stan, pars = c(\"mu\", \"tau\")) library(bayesplot) color_scheme_set(\"red\")  mcmc_areas(fit_stan,pars = c(\"mu\",\"tau\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"nimble-nimble","dir":"Articles","previous_headings":"Model Specification","what":"Nimble (nimble)","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"nimble even close BUGS syntax. fit example, can seen code:","code":"library(nimble)  # Non-centered Eight Schools model using BUGS syntax nimble_model_code <- nimbleCode({   for (j in 1:J) {     y[j] ~ dnorm(theta[j], sd = sigma[j])     theta[j] <- mu + tau * eta[j]     eta[j] ~ dnorm(0, 1)   }      mu ~ dnorm(0, 10)   tau ~ dunif(0, 25)   })  # Constants constants <- list(J = J)  # Parameters to monitor params <- c(\"mu\", \"tau\", \"theta\")  # Build the model model_nimble <- nimbleModel(code = nimble_model_code, data = data_list, constants = constants)  # Compile to C++ for speed cmodel <- compileNimble(model_nimble)  # Configure MCMC mcmc_conf <- configureMCMC(model_nimble, monitors = params) cmcmc <- buildMCMC(mcmc_conf) cmcmc <- compileNimble(cmcmc, project = model_nimble)  # Run MCMC samples <- runMCMC(cmcmc, niter = 2000, nchains = 4, nburnin = 500, thin = 1) # samples is a list of matrices (one per chain) # Convert to array for bayesplot library(bayesplot) samples_array <- as.array(samples)  # Seeing the density plots for mu and tau mcmc_areas(samples_array, pars = c(\"mu\", \"tau\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"jags-rjags","dir":"Articles","previous_headings":"Model Specification","what":"JAGS (rjags)","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"JAGS uses BUGS-style syntax define hierarchical Bayesian models. Therefore, use can defined :","code":"# library(R2jags)  # or rjags  jags_model_string <- \" model {   for (j in 1:J) {     y[j] ~ dnorm(theta[j], pow(sigma[j], -2))     theta[j] <- mu + tau * eta[j]     eta[j] ~ dnorm(0, 1)   }    mu ~ dnorm(0, 0.01)       # precision = 1/variance   tau ~ dunif(0, 25)   } \"  params <- c(\"mu\",\"tau\")  # Fitting the jags model fit_jags <- jags(   data = data_list,   parameters.to.save = params,   model.file = textConnection(jags_model_string),   n.chains = 4,   n.iter = 2000,   n.burnin = 500,   n.thin = 1 ) # Plotting the results bayesplot::mcmc_areas(fit_jags$BUGSoutput$sims.array[,,c(\"mu\",\"tau\")]) # Omitting the plot for brevity"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"juliabugs-rjuliabugs","dir":"Articles","previous_headings":"Model Specification","what":"JuliaBUGS (rjuliabugs)","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"rjuliabugs previous seem Get Started page can define rjuliabugs model also using BUGS-syntax style. precise, code JAGS subsection. following steps may differ, example  summarise, vignette demonstrated models originally written Stan, Nimble, JAGS can translated run rjuliabugs minimal modifications. examples focused workflow defining model, passing data, running sampler, extracting posterior samples visualization. purpose compare performance different samplers, rather show users familiar probabilistic programming languages can quickly adopt rjuliabugs leverage Julia’s HMC/NUTS capabilities directly R.","code":"library(rjuliabugs)  rjuliabugs_model_string <- \" model {   for (j in 1:J) {     y[j] ~ dnorm(theta[j], pow(sigma[j], -2.0)) # Remember in the rjuliabugs it need to be 2.0     theta[j] <- mu + tau * eta[j]     eta[j] ~ dnorm(0, 1)   }    mu ~ dnorm(0, 0.01)          tau ~ dunif(0, 25)   } \"  # Parameters to save params <- c(\"mu\", \"tau\")  # Run JuliaBUGS sampler fit_juliabugs <- juliaBUGS(   data = data_list,   model_def = rjuliabugs_model_string,   params_to_save = params,   n_iter = 2000,   n_chain = 4,   posterior_type = \"array\",   progress = FALSE )  # Extract posterior samples rjuliabugs_post_samples <- rjuliabugs::extract(fit_juliabugs) # Visualize mu and tau library(bayesplot) mcmc_areas(rjuliabugs_post_samples, pars = c(\"mu\", \"tau\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/other_ppl.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Translating Probabilistic Models: From JAGS, Nimble, and Stan to rjuliabugs","text":"Carpenter, B. et al. (2017). Stan: probabilistic programming language. Journal Statistical Software, 76(1). https://doi.org/10.18637/jss.v076.i01 Stan Development Team. (2024). “Stan Reference Manual, Version 2.36”. https://mc-stan.org Plummer, M. (2003). JAGS: program analysis Bayesian graphical models using Gibbs sampling. Proceedings 3rd International Workshop Distributed Statistical Computing. de Valpine P, Turek D, Paciorek C, Anderson-Bergman C, Temple Lang D, Bodik R (2017). “Programming models: writing statistical algorithms general model structures NIMBLE.” Journal Computational Graphical Statistics, 26, 403-413. doi:10.1080/10618600.2016.1172487. de Valpine P, Paciorek C, Turek D, Michaud N, Anderson-Bergman C, Obermeyer F, Wehrhahn Cortes C, Rodrìguez , Temple Lang D, Paganin S (2024a). NIMBLE: MCMC, Particle Filtering, Programmable Hierarchical Modeling. doi:10.5281/zenodo.1211190, R package version 1.3.0, https://cran.r-project.org/package=nimble. de Valpine P, Paciorek C, Turek D, Michaud N, Anderson-Bergman C, Obermeyer F, Wehrhahn Cortes C, Rodrìguez , Temple Lang D, Paganin S (2024b). NIMBLE User Manual. doi:10.5281/zenodo.1211190, R package manual version 1.3.0, https://r-nimble.org. Rubin, D. B. (1981). Estimation parallel randomized experiments. Journal Educational Statistics, 6(4), 377–401. https://doi.org/10.3102/10769986006004377","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"vignette assumes rjuliabugs already correctly installed set . goal provide working example assumption installation functional. detailed installation instructions troubleshooting information, please refer README. installation guide includes following sections: Installing Julia Julia found R found installation issues Using rjuliabugs parallel","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"demonstrate first example, use dataset presented official JuliaBUGS illustration. case concerns proportion seeds germinated 21 plates. work data, need create named list R contains variables required model. Users already familiar fitting models using JAGS Stan recognize structure passing named list data input model. , follow convention. One important disclaimer concerns definition use numeric values, particularly integers. specifying integer data list, make sure written decimal point. example, variable like N (e.g., total number plates) defined 21.0 instead 21, JuliaCall automatically convert Float, may lead error model expects Integer. Always use strict integer values required model. Inspecting closely element r[] number germinated seeds n[] total number seeds ii-th plate. Let pip_{} probability germination ii-th plate. , model defined : logit(pi)=α0+α1x1i+α2x2i+α12x1ix2i+bibi∼𝒩(0,τ)ri∼Binomial(pi,ni) \\begin{aligned} \\text{logit}(p_i) &= \\alpha_0 + \\alpha_1 x_{1i} + \\alpha_2 x_{2i} + \\alpha_{12} x_{1i} x_{2i} + b_i \\\\ b_i &\\sim \\mathcal{N}(0, \\tau) \\\\ r_i &\\sim \\text{Binomial}(p_i, n_i) \\end{aligned} x1ix_{1i} x2ix_{2i} seed type root extract ii-th plate.","code":"data <- list(     r = c(10, 23, 23, 26, 17, 5, 53, 55, 32, 46, 10, 8, 10, 8, 23, 0, 3, 22, 15, 32, 3),     n = c(39, 62, 81, 51, 39, 6, 74, 72, 51, 79, 13, 16, 30, 28, 45, 4, 12, 41, 30, 51, 7),     x1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),     x2 = c(0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),     N = 21 )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"bugs-model","dir":"Articles","previous_headings":"","what":"BUGS model","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"data prepared, can define model using original BUGS syntax. rjuliabugs, write model string R, following structure used R packages interface BUGS-like tools: Users familiar R packages like R2jags, rjags, R2WinBUGS recognize approach: model defined string using BUGS modeling language. users coming Stan (e.g., via rstan cmdstanr), idea similar: model written probabilistic program inside string object, compiled executed backend. syntactic similarity accidental. design choice rjuliabugs, aims allow users reuse models originally written JAGS WinBUGS, taking advantage modern features available Julia—Hamiltonian Monte Carlo automatic differentiation—via JuliaBUGS. also remind users familiar BUGS syntax, syntax-related mistakes lead errors model compilation. additional guidance, see Miscellaneous Notes BUGS JuliaBUGS documentation, well BUGS Developer Manual. example, writing 1.0E-6.0 instead 1.0E-6 syntax error BUGS, even though numerical meaning equivalent. types issues can subtle cause model fail parsing, attention detail writing BUGS code important.","code":"model_def <- \" model {     for (i in 1:N) {         r[i] ~ dbin(p[i], n[i])         b[i] ~ dnorm(0.0, tau)         logit(p[i]) <- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +                        alpha12 * x1[i] * x2[i] + b[i]     }     alpha0 ~ dnorm(0.0, 1.0E-6)     alpha1 ~ dnorm(0.0, 1.0E-6)     alpha2 ~ dnorm(0.0, 1.0E-6)     alpha12 ~ dnorm(0.0, 1.0E-6)     tau ~ dgamma(0.001, 0.001)     sigma <- 1 / sqrt(tau) } \""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"inference-running-the-sampler","dir":"Articles","previous_headings":"","what":"Inference / Running the Sampler","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"data defined model set , can run sampler perform inference. setup HMC sampler uses -U-Turn Sampler (NUTS) target acceptance probability (δ=0.8)(\\delta=0.8) step size adaptation. done using main function, juliaBUGS. example: return MCMC chains, brief inspection can done summary function wish obtain summary statistics saved parameter, can set argument get_summary = TRUE calling summary(). Additionally, include quantiles associated posterior distributions, set get_quantiles = TRUE. inspect summary output format displayed JuliaBUGS, set julia_summary_only = TRUE. return native Julia-style summary. details, see documentation running ?summary.rjuliabugs.","code":"library(rjuliabugs)  posterior <- juliaBUGS(   data = data,   model_def = model_def,   params_to_save = c(\"alpha0\", \"alpha1\", \"alpha2\", \"alpha12\", \"sigma\"),   n_iter = 2000,   n_warmup = 1000,   n_discard = 1000,   n_chain = 4,   use_parallel = FALSE,   n_thin = 1 ) #> Preparing JuliaBUGS setup... DONE! #> Initialising AbstractMCMC.sample()...  #>  DONE! # Generating the summary of the code summary(posterior,get_summary = FALSE,get_quantiles = FALSE) #> Summary of JuliaBUGS sampler: #>  #> Iterations        = 3000 #> Number of chains  = 4 #> Number of posterior samples = 2000 #> Thinning parameter = 1 #> Samples per chain = 1001:3000 #>  #> Summary Statistics: #>  #>  parameters      mean     std     mcse ess_bulk ess_tail  rhat ess_per_sec #>         tau 34.876682 85.7835 5.720688    461.8    291.5 1.008          NA #>     alpha12 -0.827966  0.4422 0.007186   3810.1   3436.9 1.001          NA #>      alpha2  1.355327  0.2775 0.004849   3305.1   3402.1 1.001          NA #>      alpha1  0.080584  0.3232 0.005637   3291.5   4104.1 1.001          NA #>      alpha0 -0.550664  0.1974 0.003521   3099.5   4221.4 1.001          NA #>        b[1] -0.201992  0.2600 0.005059   2822.6   4403.6 1.001          NA #>        b[2]  0.007469  0.2250 0.002965   5859.9   4295.8 1.001          NA #>        b[3] -0.206573  0.2331 0.004995   2305.3   3799.0 1.002          NA #>        b[4]  0.285714  0.2602 0.006398   1680.7   3538.3 1.002          NA #>        b[5]  0.120503  0.2426 0.003777   4627.0   4273.4 1.001          NA #>          ... #>   17 rows omitted"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"inspecting-the-posterior-samples","dir":"Articles","previous_headings":"","what":"Inspecting the Posterior Samples","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"sampling done, juliaBUGS function returns object class rjuliabugs. object contains: params Posterior samples, format specified posterior_type. parameters defined saved argument params_to_save. format object depends prior definition argument posterior_type calling juliaBUGS. default \"array\", compatible R libraries work posterior samples, returns 3D numeric array (iterations × chains × parameters). available types \"rvar\", \"mcmc\", \"draws\". See ?juliaBUGS details. name Character string identifying Julia sampler object. mentioned , rjuliabugs relies heavily JuliaCall integrate R interface Julia. using package, Julia session runs background generates Chains object containing posterior samples, can accessed name argument. name can defined calling juliaBUGS name parameter serves key retrieve fitted sampler. juliaBUGS called multiple times name, rjuliabugs automatically generates new unique name avoid overwriting. delete fitted model object Julia environment, call delete_julia_obj() corresponding name. See ?delete_julia_obj details. sampler Sampler object returned AbstractMCMC.sample. Julia object type \"JuliaObject\". details, see documentation julia_call() JuliaCall package. n_threads Number Julia threads detected. important verify whether Julia properly recognized available threads sampler ran parallel correctly. set parallel = TRUE calling juliaBUGS value one, sampler actually ran sequentially. mcmc List MCMC configuration parameters. includes MCMC-related arguments passed calling juliaBUGS. control Control options used sampler setup. details, see documentation ?juliaBUGS.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"visualizing-posteriors","dir":"Articles","previous_headings":"","what":"Visualizing Posteriors","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"posterior samples obtained, diagnostic visualization tools easily accessible well-known packages bayesplot posterior. full walkthrough visualizations diagnostics, check vignette (currently progress). quick illustration, let’s observe density plot posteriors traceplots.  traceplots, subset α0\\alpha_{0} σ\\sigma parameters:  Similarly, diagnostics also available posterior package:","code":"library(bayesplot)  # Plotting the posterior density for the saved parameters mcmc_areas(   posterior$params,   pars =  c(\"alpha0\", \"alpha1\", \"alpha2\", \"alpha12\", \"sigma\"),   prob = 0.8 ) library(bayesplot)  # Plotting traceplots for alpha0 and sigma mcmc_trace(   x = posterior$params,   pars = c(\"alpha0\", \"sigma\"),   n_warmup = 0,   facet_args = list(nrow = 2) ) library(posterior)  # For other diagnostics, see the help page help(\"diagnostics\", \"posterior\")  # Example: effective sample size posterior::ess_basic(posterior$params[,,\"alpha0\"]) #> [1] 3142.333"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"saving-and-loading-the-rjuliabugs-model","dir":"Articles","previous_headings":"","what":"Saving and loading the rjuliabugs model","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"Lastly, important able save load rjuliabugs model. use save_rjuliabugs() save posterior object , load use load_rjuliabugs()","code":"save_rjuliabugs(rjuliabugs_model = posterior,                 file = \"rjuliabugs_model.rds\",                 chains_file = \"rjuliabugs_chains.jls\") posterior <- load_rjuliabugs(file = \"rjuliabugs_model.rds\")"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"installing-julia","dir":"Articles","previous_headings":"","what":"Installing Julia","title":"Using rjuliabugs: Setup and Troubleshooting","text":"recommend installing Julia using juliaup, official Julia version manager. provides reliable maintainable way install, update, manage Julia versions across platforms. Using juliaup preferred downloading Julia manually makes upgrading Julia seamless safe, supports managing multiple versions, ensures compatibility R-Julia integration tools like JuliaCall. install, follow instructions:","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"windows-via-powershell","dir":"Articles","previous_headings":"Installing Julia","what":"Windows (via PowerShell)","title":"Using rjuliabugs: Setup and Troubleshooting","text":"Open PowerShell (Administrator) run: Requires Windows 10/11 winget available.","code":"winget install --id=JuliaLang.Julia -e"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"macos-via-homebrew","dir":"Articles","previous_headings":"Installing Julia","what":"macOS (via Homebrew)","title":"Using rjuliabugs: Setup and Troubleshooting","text":"use Homebrew, run: installs juliaup sets latest stable Julia version default.","code":"brew install juliaup juliaup add release"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"ubuntu-via-apt","dir":"Articles","previous_headings":"Installing Julia","what":"Ubuntu (via APT)","title":"Using rjuliabugs: Setup and Troubleshooting","text":"recent Ubuntu versions, can install via APT: juliaup available via APT system, follow manual installation instructions Juliaup GitHub page.","code":"sudo apt update sudo apt install juliaup juliaup add release"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"verify-installation","dir":"Articles","previous_headings":"Installing Julia > Ubuntu (via APT)","what":"Verify Installation","title":"Using rjuliabugs: Setup and Troubleshooting","text":"installation, open terminal run: start Julia REPL installed version. now ready use Julia rjuliabugs.","code":"julia"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"troubleshooting-juliacall-setup","dir":"Articles","previous_headings":"","what":"Troubleshooting JuliaCall setup","title":"Using rjuliabugs: Setup and Troubleshooting","text":"rjuliabugs package relies JuliaCall package communicate Julia R. Errors may occur Julia properly installed JuliaCall locate Julia binary. common errors include:","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"error-type-julia-not-found","dir":"Articles","previous_headings":"Troubleshooting JuliaCall setup","what":"Error type: “Julia Not Found”","title":"Using rjuliabugs: Setup and Troubleshooting","text":"JULIA_HOME environment variable tells R find Julia. ’s set correctly, rjuliabugs able communicate Julia via JuliaCall. Open terminal command prompt. Check JULIA_HOME set running: (Windows PowerShell use: echo $Env:JULIA_HOME) empty incorrect, installed Julia using juliaup, Julia binary typically located : can set environment variable current session : (Windows PowerShell use: $Env:JULIA_HOME=\"$HOME/.juliaup/bin“) Replace path correct location installation differs (e.g., ’re Windows, might something like \"C:/Users/YourName/AppData/Local/Programs/Julia-1.x.x/bin\"). make setting permanent (don’t need set every time): macOS/Linux: Open shell configuration file (e.g., .bashrc, .zshrc) text editor: Add following line end file: Save exit (Ctrl+O, Enter, Ctrl+X nano). reload shell configuration restart terminal: (source ~/.zshrc using zsh) Windows: Search “Environment Variables” Start menu open “Edit system environment variables.” Click “Environment Variables.” “User variables” “System variables,” click “New…” Set variable name JULIA_HOME value path Julia’s binary installed juliaup (e.g., C:\\Users\\your_user\\AppData\\Local\\Microsoft\\WindowsApps). Click OK save dialogs. Restart terminal R session changes take effect. Verify set correctly re-running: (R use: Sys.getenv(\"JULIA_HOME\")) Setting JULIA_HOME correctly ensures JuliaCall can launch Julia, required rjuliabugs function.","code":"echo $JULIA_HOME ~/.juliaup/bin export JULIA_HOME=\"$HOME/.juliaup/bin\" nano ~/.bashrc nano ~/.zshrc export JULIA_HOME=\"$HOME/.juliaup/bin\" source ~/.bashrc echo $JULIA_HOME"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"error-type-r_home-not-found","dir":"Articles","previous_headings":"Troubleshooting JuliaCall setup","what":"Error type: “R_HOME not found”","title":"Using rjuliabugs: Setup and Troubleshooting","text":"ensure rjuliabugs works correctly, set R_HOME environment variable Julia can locate R installation. Open terminal command prompt. Check R_HOME set running: (Windows PowerShell use echo $Env:R_HOME) empty, open R run: Copy printed R installation path. Set environment variable terminal session : (Windows PowerShell, use: $Env:R_HOME=\"PASTE_YOUR_PATH_HERE\") make setting permanent (applies every time open terminal run R): macOS/Linux: Open shell configuration file text editor (e.g., nano): use zsh: Add line: Save exit (Ctrl+O, Enter, Ctrl+X nano). reload shell configuration restart terminal: (source ~/.zshrc using zsh) Windows: Search “Environment Variables” Start menu open “Edit system environment variables.” Click “Environment Variables.” “User variables” “System variables,” click “New…” Set variable name R_HOME value full R path copied. Click OK save dialogs. Restart terminal R session changes take effect. Verify reopening terminal running echo command step 2. ensures Julia, called R via JuliaCall, can find R installation prevents initialization errors rjuliabugs.","code":"echo $R_HOME R.home() export R_HOME=\"PASTE_YOUR_PATH_HERE\" nano ~/.bashrc nano ~/.zshrc export R_HOME=\"PASTE_YOUR_PATH_HERE\" source ~/.bashrc"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/setup_troubleshooting.html","id":"other-installations-issues","dir":"Articles","previous_headings":"Troubleshooting JuliaCall setup","what":"Other installations issues","title":"Using rjuliabugs: Setup and Troubleshooting","text":"Many common installation problems related JuliaCall well documented Troubleshooting Ways Get Help section JuliaCall GitHub page. encounter issues setting rjuliabugs system covered , feel free open issue repository. ’re happy help!","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Plotting rjuliabugs draws using bayesplot package","text":"article focuses plotting parameter estimates MCMC draws obtained using rjuliabugs::juliaBUGS() sampler. cover MCMC diagnostics alternative visualization tools packages, although easily adapted, since plots operate params array extracted rjuliabugs object. visualizations shown based presented original vignette Jonah Gabry Martin Modrák. strongly recommend reading article: https://mc-stan.org/bayesplot/articles/visual-mcmc-diagnostics.html. Much code several plots directly inspired examples. begin, load necessary models reproduce examples:","code":"library(bayesplot) library(ggplot2) library(rjuliabugs)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Plotting rjuliabugs draws using bayesplot package","text":"previously mentioned goal vignette exclusively show use present visualizations tools samples obtained sampler rjuliabugs. Therefore assume rjuliabugs model object already fitted named `rjuliabugs_fit``. full walkthrough moment, please refer article named Get Started section generate posterior draws sampler","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"inspect-the-params-object-","dir":"Articles","previous_headings":"Example","what":"Inspect the params object.","title":"Plotting rjuliabugs draws using bayesplot package","text":"rjuliabugs S3 object contains information data used sampler. includes, name identify model object Julia environment, mcmc configuration parameters posterior draws named params default given 3D numeric array respective dimensions (iterations chains parameters). choice array default due compatibility packages R enviroment work posterior samplers. However, converstion types comptabilite packages possible functions as_rvar, as_mcmc as_draws can called model object (as_rvar(rjuliabugs)) rjuliabugs$params object (as_rvar(juliabugs$params). See reference section complete documentation examples. first need extract posterior samples, use rjuliabugs::extract function: Verifying dimensions posterior_samples object total 2000 iterations, 4 chains 5 parameters stored.","code":"pars_names <- c(\"alpha0\",\"alpha1\",\"alpha2\",\"alpha12\",\"sigma\") posterior_samples <- rjuliabugs::extract(rjuliabugs_fit,pars = pars_names) dim(posterior_samples) #> [1] 2000    4    5"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"posterior-uncertainty-intervals","dir":"Articles","previous_headings":"","what":"Posterior uncertainty intervals","title":"Plotting rjuliabugs draws using bayesplot package","text":"Central credible intervals posterior distribution can visualized using mcmc_intervals function.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_intervals","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_intervals","title":"Plotting rjuliabugs draws using bayesplot package","text":"default, plot displays 50% credible intervals bold lines 90% intervals thinner outer segments. settings can adjusted using prob prob_outer parameters, respectively. plotted points represent posterior medians; preferred, point_est option allows switching posterior means suppressing point estimates entirely. represent uncertainty shaded regions beneath posterior density estimates, mcmc_areas function can employed.","code":"color_scheme_set(\"red\") mcmc_intervals(posterior_samples, pars =  pars_names)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_intervals-1","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_intervals","title":"Plotting rjuliabugs draws using bayesplot package","text":"","code":"mcmc_areas(   posterior_samples,    pars = pars_names,   prob = 0.8, # 80% intervals   prob_outer = 0.99, # 99%   point_est = \"mean\" )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_areas_ridges","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_areas_ridges","title":"Plotting rjuliabugs draws using bayesplot package","text":"can also generate additional plots calling mcmc_areas_ridges ## Univariate marginal posterior distributions bayesplot package includes functions visualizing marginal posterior distributions histograms kernel density estimates, either merging Markov chains displaying individually.","code":"mcmc_areas_ridges(   posterior_samples,    pars = pars_names,   prob = 0.8, # 80% intervals   prob_outer = 0.99, # 99%   point_est = \"mean\" )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_hist","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_hist","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_hist function plots marginal posterior distributions (combining chains):","code":"color_scheme_set(\"blue\") mcmc_hist(posterior_samples, pars = c(\"alpha0\", \"sigma\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_hist_by_chain","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_hist_by_chain","title":"Plotting rjuliabugs draws using bayesplot package","text":"visualize individual histograms four Markov chains, mcmc_hist_by_chain function can used; generates separate facets chain within plot. interested also display transformation display histograms, possible setting transformations argument. Many plotting functions MCMC draws also include transformations argument apply transformations parameters plotting.","code":"color_scheme_set(\"darkgreen\") mcmc_hist_by_chain(posterior_samples, pars = c(\"alpha0\", \"sigma\")) color_scheme_set(\"darkgreen\") mcmc_hist_by_chain(posterior_samples, pars = c(\"alpha0\", \"sigma\"),                    transformations = list(\"sigma\" = \"log\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_dens","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_dens","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_dens function works similarly mcmc_hist, displays kernel density estimates place histograms. include version mcmc_dens_by_chain.","code":"color_scheme_set(\"brightblue\") mcmc_dens(posterior_samples, pars = c(\"alpha0\", \"sigma\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_dens_overlay","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_dens_overlay","title":"Plotting rjuliabugs draws using bayesplot package","text":"Similar mcmc_hist_by_chain, mcmc_dens_overlay function distinguishes Markov chains; however, rather showing separate panels, overlays density estimates single plot.","code":"mcmc_dens_overlay(posterior_samples, pars = c(\"alpha0\", \"sigma\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_violin","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_violin","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_violin function visualizes density estimates chain using violin plots adds horizontal lines quantiles specified user.","code":"color_scheme_set(\"teal\") mcmc_violin(posterior_samples, pars = c(\"alpha0\", \"alpha12\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"bivariate-plots","dir":"Articles","previous_headings":"","what":"Bivariate plots","title":"Plotting rjuliabugs draws using bayesplot package","text":"range functions can used visualize bivariate marginal posterior distributions. Several functions allow optional parameters incorporate MCMC diagnostic details plots. extended diagnostic features explained separate vignette focused visual MCMC diagnostics. examples replicate examples complete reference check original documentation","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_scatter","dir":"Articles","previous_headings":"Bivariate plots","what":"mcmc_scatter","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_scatter function generates basic scatter plot showing relationship two parameters.","code":"color_scheme_set(\"orange\") mcmc_scatter(posterior_samples,               pars = c(\"alpha0\", \"alpha12\"),              size = 1.5,              alpha = 0.5)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_hex","dir":"Articles","previous_headings":"Bivariate plots","what":"mcmc_hex","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_hex function produces comparable plot using hexagonal bins, helps reduce overplotting many points overlap.","code":"color_scheme_set(\"gray\") # requires hexbin package if (requireNamespace(\"hexbin\", quietly = TRUE)) {   mcmc_hex(posterior_samples, pars = c(\"alpha0\", \"alpha12\")) }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_pairs","dir":"Articles","previous_headings":"Bivariate plots","what":"mcmc_pairs","title":"Plotting rjuliabugs draws using bayesplot package","text":"addition mcmc_scatter mcmc_hex, bayesplot package also includes mcmc_pairs function, allows users create pairs plots exploring relationships among multiple parameters.  Univariate marginal posterior distributions appear along diagonal histograms default, can switched density plots using diag_fun = \"dens\". bivariate relationships shown diagonal using scatter plots, though can replaced hex-bin plots setting off_diag_fun = \"hex\". default, mcmc_pairs splits Markov chains—showing half diagonal rest number chains even. Additional options customizing chains divided across plots available condition argument, although settings primarily useful including MCMC diagnostic information. details provided official vignette bayesplot documentation named Visual MCMC Diagnostics vignette.","code":"color_scheme_set(\"purple\") # requires hexbin package mcmc_pairs(posterior_samples,           pars = c(\"alpha0\", \"alpha1\",\"alpha12\"),          off_diag_args = list(size = 1.5))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"trace-plots","dir":"Articles","previous_headings":"","what":"Trace plots","title":"Plotting rjuliabugs draws using bayesplot package","text":"Trace plots display Markov chains smaples, allowing users inspect parameter values evolve iterations. section presents standard trace plots available bayesplot package.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_trace","dir":"Articles","previous_headings":"Trace plots","what":"mcmc_trace","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_trace function generates basic trace plots visualize sampling paths parameters across iterations.  differences chains difficult distinguish, mixed color scheme can used improve clarity. example:  example also demonstrates facet_args argument, allows pass options ggplot2’s facet_wrap. Setting ncol = 1 stacks trace plots single column, strip.position = \"left\" moves facet labels y-axis rather displaying plot.","code":"color_scheme_set(\"blue\") mcmc_trace(posterior_samples, pars = c(\"alpha0\", \"sigma\")) color_scheme_set(\"mix-blue-red\") mcmc_trace(posterior_samples, pars = c(\"alpha0\", \"sigma\"),            facet_args = list(ncol = 1, strip.position = \"left\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"mcmc_trace_highlight","dir":"Articles","previous_headings":"Trace plots","what":"mcmc_trace_highlight","title":"Plotting rjuliabugs draws using bayesplot package","text":"mcmc_trace_highlight function displays points instead lines lowers opacity chains except one, emphasized using highlight argument.  trace plots focus Markov chains evolve iterations, mcmc_rank_hist() examines well chains mix comparing distribution ranks. Ideally, histogram roughly uniform, indicating good mixing across chains. See Vehtari et al. (2021) background.  Additionally, mcmc_rank_ecdf() plots empirical cumulative distribution functions (ECDFs) ranks along simultaneous confidence bands. bands coverage probability controlled prob argument, meaning designed fully contain rank ECDFs probability prob. plot_diff = TRUE, plot also shows difference observed rank ECDFs theoretical uniform distribution expected samples came distribution. details, see Säilynoja et al. (2022). function arguments similar mcmc_rank_hist.","code":"color_scheme_set(\"viridis\") mcmc_trace_highlight(posterior_samples, pars = c( \"sigma\"),            highlight = 1) mcmc_rank_hist(posterior_samples, pars = c(\"sigma\"))"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/using_bayesplot.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Plotting rjuliabugs draws using bayesplot package","text":"Aki Vehtari, Andrew Gelman, Daniel Simpson, Bob Carpenter, Paul-Christian Bürkner “Rank-Normalization, Folding, Localization: Improved R-hat Assessing Convergence MCMC (Discussion),” Bayesian Analysis, Bayesian Anal. 16(2), 667-718, (June 2021) Säilynoja, T., Bürkner, PC. & Vehtari, . Graphical test discrete uniformity applications goodness--fit evaluation multiple sample comparison. Stat Comput 32, 32 (2022). https://doi.org/10.1007/s11222-022-10090-6 Gabry, J., Goodrich, B. (2017). rstanarm: Bayesian Applied Regression Modeling via Stan. R package version 2.15.3. https://mc-stan.org/rstanarm/, https://CRAN.R-project.org/package=rstanarm Gabry, J., Simpson, D., Vehtari, ., Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. :10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. Stan Development Team. (2024). Stan Reference Manual, Version 2.36. https://mc-stan.org Stan Development Team. (2024). bayesplot: Plotting MCMC draws. https://mc-stan.org/bayesplot/articles/plotting-mcmc-draws.html","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mateus Maia. Author, maintainer. Xianda Sun. Author. Robert Goudie. Author.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maia M, Sun X, Goudie R (2025). rjuliabugs: Interface 'JuliaBUGS.jl' R. R package version 0.1.0, https://mateusmaiads.github.io/rjuliabugs/.","code":"@Manual{,   title = {rjuliabugs: Interface to 'JuliaBUGS.jl' from R},   author = {Mateus Maia and Xianda Sun and Robert Goudie},   year = {2025},   note = {R package version 0.1.0},   url = {https://mateusmaiads.github.io/rjuliabugs/}, }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"rjuliabugs-","dir":"","previous_headings":"","what":"Interface to JuliaBUGS.jl from R","title":"Interface to JuliaBUGS.jl from R","text":"rjuliabugs R package provides bridge R JuliaBUGS, BUGS-style Bayesian modeling interface developed Julia part Turing.jl probabilistic programming ecosystem. JuliaBUGS allows users define models using familiar BUGS syntax leveraging speed flexibility Julia language. enables automatic translation BUGS code modern probabilistic programs run efficiently advanced inference engines Hamiltonian Monte Carlo (HMC) — accessible via Turing.jl. rjuliabugs, R users can run BUGS models/code JuliaBUGS take advantage inference algorithms available Turing.jl, without leaving R environment. provides seamless path adopt faster (including parallelization) flexible sampling methods also allows integration R’s extensive post-processing ecosystem (e.g., bayesplot, posterior, coda). lowers barrier existing BUGS users adopt modern Bayesian tools without abandoning existing model codebase.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to JuliaBUGS.jl from R","text":"can install development version rjuliabugs GitHub : ⚠️ Loading package: starting R session first time, loading package rjuliabugs running function, recommend run rjuliabugs::setup_juliaBUGS() build Julia setup R install needed dependencies. recommend initially time-consuming. See ?rjuliabugs::setup_juliaBUGS details. guidance, articles page summarize FAQ additional instructions installing Julia setting rjuliabugs, troubleshooting, running rjuliabugs parallel. recommend reading working rjuliabugs: Installing Julia Julia found R found installation issues Using rjuliabugs parallel","code":"# install.packages(\"remotes\") remotes::install_github(\"MateusMaiaDS/rjuliabugs\")"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Interface to JuliaBUGS.jl from R","text":"Contributions welcome! encounter bug feature request, please open issue.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Interface to JuliaBUGS.jl from R","text":"package licensed MIT License. See LICENSE file details.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Interface to JuliaBUGS.jl from R","text":"project part Google Summer Code 2025 initiative Turing.jl organization. mentors Xianda Sun Robert Goudie.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to posterior::draws format — as_draws","title":"Convert to posterior::draws format — as_draws","text":"Generic function convert object posterior::draws representation (e.g., draws_array, draws_matrix, formats).","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to posterior::draws format — as_draws","text":"","code":"as_draws(x, ...)  # S3 method for class 'rjuliabugs' as_draws(x, ...)  # S3 method for class 'array' as_draws(x, ...)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to posterior::draws format — as_draws","text":"x object convert (e.g., rjuliabugs object 3D array). ... arguments passed specific methods.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to posterior::draws format — as_draws","text":"draws object (e.g., draws_array) modified rjuliabugs object. object class \"rjuliabugs\" (named list) following elements: params Posterior samples converted posterior::draws_array. name name Julia sampler object (unchanged). sampler sampler object returned AbstractMCMC.sample Julia (unchanged). n_threads Number Julia threads detected (unchanged). mcmc MCMC configuration parameters; posterior_type updated \"draws\". control Control options passed used sampler (unchanged). object class draws_array (posterior package). 3D array (iterations × chains × parameters) converted draws_array, preserving chain structure parameter names.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to coda::mcmc or mcmc.list format — as_mcmc","title":"Convert to coda::mcmc or mcmc.list format — as_mcmc","text":"Generic function convert Markov Chain Monte Carlo (MCMC) output coda::mcmc coda::mcmc.list format.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to coda::mcmc or mcmc.list format — as_mcmc","text":"","code":"as_mcmc(x, ...)  # S3 method for class 'rjuliabugs' as_mcmc(x, ...)  # S3 method for class 'array' as_mcmc(x, ...)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to coda::mcmc or mcmc.list format — as_mcmc","text":"x object convert (e.g., rjuliabugs object 3D array). ... arguments passed specific methods.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to coda::mcmc or mcmc.list format — as_mcmc","text":"object class mcmc, mcmc.list, rjuliabugs object updated params. object class \"rjuliabugs\" (named list) following elements: params Posterior samples converted coda::mcmc single chain, coda::mcmc.list multiple chains. name name Julia sampler object (unchanged). sampler sampler object returned AbstractMCMC.sample Julia (unchanged). n_threads Number Julia threads detected (unchanged). mcmc MCMC configuration parameters; posterior_type updated \"mcmc\". control Control options passed used sampler (unchanged). Returns posterior samples converted coda::mcmc array one chain, coda::mcmc.list multiple chains. Input must 3D array (iterations × chains × parameters). column corresponds parameter, row corresponds iteration.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_rvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to posterior::rvar format — as_rvar","title":"Convert to posterior::rvar format — as_rvar","text":"Generic function convert object posterior::rvar representation. typically used convert Markov Chain Monte Carlo (MCMC) output flexible vectorized format.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_rvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to posterior::rvar format — as_rvar","text":"","code":"as_rvar(x, ...)  # S3 method for class 'rjuliabugs' as_rvar(x, ...)  # S3 method for class 'array' as_rvar(x, n_mcmc = NULL, ...)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_rvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to posterior::rvar format — as_rvar","text":"x object convert (e.g., rjuliabugs object 3D numeric array). ... arguments passed specific methods. n_mcmc (arrays ) Number Markov Chain Monte Carlo (MCMC) chains. Required x array.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/as_rvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to posterior::rvar format — as_rvar","text":"object class rvar, updated rjuliabugs object params converted rvar. object class \"rjuliabugs\" (named list) following elements: params Posterior samples, converted requested format: rvar as_rvar, mcmc/mcmc.list as_mcmc, draws_array as_draws. name name Julia sampler object. sampler sampler object returned AbstractMCMC.sample Julia. n_threads Number Julia threads detected. mcmc list MCMC configuration parameters, now including posterior_type indicating format params. control Control options passed used sampler. object class rvar (posterior package). input 3D array (iterations × chains × parameters) converted posterior rvar object, parameter represented random variable across iterations chains.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Bayesian Updating for Gibbs Sampling (BUGS) Model to Julia's `@bugs` Macro Format — bugs2juliaBUGS","title":"Convert Bayesian Updating for Gibbs Sampling (BUGS) Model to Julia's `@bugs` Macro Format — bugs2juliaBUGS","text":"function formats Bayesian Updating Gibbs Sampling (BUGS) model string Julia's `@bugs(\"\"\"...\"\"\", convert_var_name, true)` macro syntax, used run BUGS models Julia. default, R-style variable names (e.g., `.b.c`) converted Julia-style (`a_b_c`). can disable behavior setting `convert_var_name = FALSE`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Bayesian Updating for Gibbs Sampling (BUGS) Model to Julia's `@bugs` Macro Format — bugs2juliaBUGS","text":"","code":"bugs2juliaBUGS(model_code, convert_var_name = TRUE)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Bayesian Updating for Gibbs Sampling (BUGS) Model to Julia's `@bugs` Macro Format — bugs2juliaBUGS","text":"model_code character string containing BUGS model code. convert_var_name Logical; TRUE (default), R-style variable names (e.g., .b.c) converted Julia-style (a_b_c). Set FALSE preserve original names.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Bayesian Updating for Gibbs Sampling (BUGS) Model to Julia's `@bugs` Macro Format — bugs2juliaBUGS","text":"character string representing valid Julia `@bugs` macro call. string can evaluated Julia define BUGS model optional variable name conversion.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Bayesian Updating for Gibbs Sampling (BUGS) Model to Julia's `@bugs` Macro Format — bugs2juliaBUGS","text":"","code":"if (FALSE) { # \\dontrun{ model <- \"   for i in 1:N     y[i] ~ dnorm(mu, tau)   end   mu ~ dnorm(0.0, 1.0E-6)   tau ~ dgamma(0.001, 0.001) \" bugs2juliaBUGS(model) bugs2juliaBUGS(model, convert_var_name = FALSE) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure Unique Name for Julia Sampler (Internal) — check_sampler_is_defined","title":"Ensure Unique Name for Julia Sampler (Internal) — check_sampler_is_defined","text":"Checks whether Julia variable name already defined Main module. name exists, appends random characters unique name found.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure Unique Name for Julia Sampler (Internal) — check_sampler_is_defined","text":"","code":"check_sampler_is_defined(name)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure Unique Name for Julia Sampler (Internal) — check_sampler_is_defined","text":"name character string representing Julia object name.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure Unique Name for Julia Sampler (Internal) — check_sampler_is_defined","text":"unique name currently defined Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Numeric Elements in a List to Integer or Float — convert_numeric_types","title":"Convert Numeric Elements in a List to Integer or Float — convert_numeric_types","text":"function takes list numeric vectors returns new list numeric element automatically converted either integer (whole number) kept float (numeric). also preserves original names vector elements, .","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Numeric Elements in a List to Integer or Float — convert_numeric_types","text":"","code":"convert_numeric_types(data)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Numeric Elements in a List to Integer or Float — convert_numeric_types","text":"data list numeric vectors.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Numeric Elements in a List to Integer or Float — convert_numeric_types","text":"list structure numeric element coerced appropriate type: integers whole numbers, floats otherwise. Names preserved.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Numeric Elements in a List to Integer or Float — convert_numeric_types","text":"","code":"if (FALSE) { # \\dontrun{ input_list <- list(   a = c(x = 1.0, y = 2.5, z = 3.0),   b = c(foo = 4.0, bar = 5.1),   c = c(6, 7, 8) ) convert_numeric_types(input_list) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an object from the Julia Main environment — delete_julia_obj","title":"Delete an object from the Julia Main environment — delete_julia_obj","text":"function removes variable object Julia Main module using JuliaCall. useful cleaning resetting objects defined Julia environment R.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an object from the Julia Main environment — delete_julia_obj","text":"","code":"delete_julia_obj(obj_name)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an object from the Julia Main environment — delete_julia_obj","text":"obj_name character string specifying name Julia object deleted. correspond variable symbol previously defined Julia Main module.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete an object from the Julia Main environment — delete_julia_obj","text":"return value, called side effects.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an object from the Julia Main environment — delete_julia_obj","text":"","code":"if (FALSE) { # \\dontrun{ JuliaCall::julia_command(\"x = 10\")  # Define a Julia variable delete_julia_obj(\"x\")               # Delete it } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Posterior Samples from an `rjuliabugs` S3 Object — extract","title":"Extract Posterior Samples from an `rjuliabugs` S3 Object — extract","text":"Extracts posterior samples specified parameters fitted `rjuliabugs` object. Output can returned several formats depending downstream analysis requirements.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Posterior Samples from an `rjuliabugs` S3 Object — extract","text":"","code":"extract(rjuliabugs, pars = NULL, type = \"array\", include = TRUE)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Posterior Samples from an `rjuliabugs` S3 Object — extract","text":"rjuliabugs S3 object class `rjuliabugs`, typically returned call `juliaBUGS()` function. Must contain `params` 3D array `mcmc` list fields `params_to_save` `n_chain`. pars Character vector parameter names extract. `NULL`, defaults `rjuliabugs$mcmc$params_to_save`. type Character string indicating output type: one `\"array\"` (default), `\"rvar\"`, `\"mcmc\"`, `\"draws\"`. include Logical; `TRUE`, extract `pars`; `FALSE`, exclude `pars`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Posterior Samples from an `rjuliabugs` S3 Object — extract","text":"posterior samples specified format: 3D `array` [iterations × chains × parameters], `posterior::rvar` object, `coda::mcmc` `coda::mcmc.list`, `posterior::draws_array`/`draws_list`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameter Samples from a Turing.jl MCMCChains Object (internal use only) — get_params_from_name_raw","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object (internal use only) — get_params_from_name_raw","text":"function extracts posterior samples specified parameters Julia `Chains` object (`Turing.jl` package) using `JuliaCall`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object (internal use only) — get_params_from_name_raw","text":"","code":"get_params_from_name_raw(params, name)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object (internal use only) — get_params_from_name_raw","text":"params character vector parameter names (defined Julia model) extract. name character string giving name Julia object current Julia session, must `Chains` object (`MCMCChains.jl` package).","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object (internal use only) — get_params_from_name_raw","text":"numeric matrix rows represent samples columns represent parameters.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object (internal use only) — get_params_from_name_raw","text":"supports extracting one parameters returns result numeric matrix R. function builds Julia expression form `Array(chains[:, [:param1, :param2], :])` extract values specified parameters sampler object. result evaluated Julia returned R numeric matrix. function reshapes output one parameter extracted ensure consistent matrix format.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"Executes Hamiltonian Monte Carlo (HMC) sampler Julia R, using model specified Julia BUGS syntax. compiles model, converts data, sets sampler parameters, returns posterior samples various formats. setup HMC sampler uses -U-Turn Sampler (NUTS) target acceptance probability δ=0.8) step size adaptation.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"","code":"juliaBUGS(   data,   model_def,   params_to_save,   initializations = NULL,   name = \"sampler_juliaBUGS\",   n_iter = 2000,   n_warmup = floor(n_iter/2),   n_discard = n_warmup,   n_thin = 1,   n_chain = 1,   use_parallel = TRUE,   posterior_type = \"array\",   force_setup_juliaBUGS = FALSE,   control = NULL,   progress = TRUE,   verbose = TRUE,   ... )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"data named list numeric values (integer double). elements must named. model_def character string model definition, either Julia-compatible format BUGS syntax. params_to_save Character vector names model parameters extract sampler output. initializations named list parameter names may wish set corresponding initial values sampler. default NULL, means default initial values used. name Character. Name sampler object created Julia (must valid Julia variable name). n_iter Integer. Total number MCMC iterations. Default 2000. n_warmup Integer. Number iterations used warm-tuning (e.g., adaption steps NUTS). Default floor(n_iter / 2). n_discard Integer. Number initial samples completely discarded. Default n_warmup, .e: discard iterations used adaptation steps. n_thin Integer. Thinning interval. Default 1 (thinning). n_chain Integer. Number MCMC chains. Default 1. use_parallel Logical. Whether use AbstractMCMC.MCMCThreads() parallel sampling. Default TRUE. posterior_type Character. Format posterior samples. One \"array\", \"rvar\", \"mcmc\", \"draws\". Default \"array\". force_setup_juliaBUGS Logical. TRUE, forces reinitialization Julia environment via setup_juliaBUGS(). Default FALSE. control Optional list control parameters. Supported entries: data_convert_int Logical. TRUE, coerces numeric values integers possible. Default TRUE. convert_var_name Logical. TRUE, automatically renames variables Bayesian Updating Gibbs Sampling (BUGS) model. Default FALSE. julia_model Logical. TRUE, assumes model already Julia format used models Turing.jl appraoch, Bayesian Updating Gibbs Sampling (BUGS) model. Default FALSE. progress Logical. TRUE, progress bar sampler displayed; FALSE, progress bar shown. default TRUE. However, function run interactively inside RStudio session, progress automatically overridden FALSE, suppresses progress output AbstractMCMC.sample. complete progress bar display rjuliabugs, one showed running Julia code,recommend running code terminal outside RStudio. verbose Logical. FALSE ommit message function indicate sampler/setup progress ... Additional arguments passed setup_juliaBUGS().","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"object class \"rjuliabugs\" (named list) following elements: params Posterior samples, format specified posterior_type (\"array\", \"rvar\", \"mcmc\", \"draws\"). name character string giving name Julia sampler object. sampler sampler object returned AbstractMCMC.sample Julia. n_threads integer giving number Julia threads detected. mcmc list MCMC configuration parameters used run. control list control options passed used sampler.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"function relies Julia packages LogDensityProblems, AdvancedHMC, AbstractMCMC. Gradients computed via ReverseDiff. model compiled sampling. posterior_type argument determines return format: \"array\": 3D numeric array (iterations × chains × parameters). \"rvar\": posterior::rvar object. \"mcmc\": coda::mcmc (single chain) mcmc.list (multiple chains). \"draws\": posterior::draws_array.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"must call setup_juliaBUGS() least using function. parallel sampling requested one Julia thread available, warning issued sampling run serially.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model — juliaBUGS","text":"","code":"if (FALSE) { # \\dontrun{ model_def <- \"model = @model ... end\" data <- list(N = 10, x = rnorm(10)) result <- juliaBUGS(   data = data,   model_def = model_def,   params_to_save = c(\"mu\"),   name = \"my_sampler\" ) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign an Integer Value to a Julia Variable — julia_assign_int","title":"Assign an Integer Value to a Julia Variable — julia_assign_int","text":"function wraps `JuliaCall::julia_assign` assign value R Julia variable, explicitly casts variable `Integer` type Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign an Integer Value to a Julia Variable — julia_assign_int","text":"","code":"julia_assign_int(x, value)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign an Integer Value to a Julia Variable — julia_assign_int","text":"x character string. name Julia variable assign value . value R object assign Julia variable. passed Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign an Integer Value to a Julia Variable — julia_assign_int","text":"Invisibly returns `NULL`. main effect side-effects Julia session.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign an Integer Value to a Julia Variable — julia_assign_int","text":"function first assigns value R variable named `x` Julia session using `JuliaCall::julia_assign`. forces Julia cast variable `Integer` type using Julia's `Integer()` constructor. Note: function assumes `value` provided compatible Julia's `Integer` type. , error thrown Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign an Integer Value to a Julia Variable — julia_assign_int","text":"","code":"if (FALSE) { # \\dontrun{ julia_assign_int(\"x\", 3.5)  # Will be cast to 3L in Julia JuliaCall::julia_eval(\"x\")  # Returns 3 (as Integer in Julia) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","title":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","text":"Loads object class rjuliabugs .rds file restores corresponding Julia sampler object using Julia’s Serialization.deserialize. path linking Chains object Julia defined function save_rjuliabugs() called.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","text":"","code":"load_rjuliabugs(file)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","text":"file character string giving path .rds file.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","text":"object class rjuliabugs, Julia sampler object loaded current session. name changed avoid conflict, returned object reflects updated name.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","text":"original sampler name (name) already exists active Julia session, new unique name generated avoid overwriting . warning issued indicate name changed. .rds file must contain valid rjuliabugs object name chains_file fields defined. function checks sampler name already defined Julia. , unique name generated using check_sampler_is_defined, Julia object loaded name.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an rjuliabugs Object and Restore the Julia State — load_rjuliabugs","text":"","code":"if (FALSE) { # \\dontrun{ model <- load_rjuliabugs(\"my_model.rds\") # model$name now contains the (possibly updated) name used in Julia } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an rjuliabugs Object and Its Julia State — save_rjuliabugs","title":"Save an rjuliabugs Object and Its Julia State — save_rjuliabugs","text":"Serializes Julia object contained rjuliabugs object saves entire object .rds file. Julia object saved separately using Julia's Serialization.serialize. file path can passed manually, retrieved chains_file slot object.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an rjuliabugs Object and Its Julia State — save_rjuliabugs","text":"","code":"save_rjuliabugs(rjuliabugs_model, file, chains_file = NULL)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an rjuliabugs Object and Its Julia State — save_rjuliabugs","text":"rjuliabugs_model object class rjuliabugs, containing least fields name (Julia object name string) chains_file. file character string giving base name path saving .rds file. extension .rds missing, appended automatically. chains_file Optional character string giving path Julia object serialized. file name .jls extension. NULL, uses chains_file field rjuliabugs_model.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an rjuliabugs Object and Its Julia State — save_rjuliabugs","text":"return value, called saving Julia object R rjuliabugs object disk.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an rjuliabugs Object and Its Julia State — save_rjuliabugs","text":"","code":"if (FALSE) { # \\dontrun{ save_rjuliabugs(my_model, file = \"my_model\", chains_file = \"chains.jls\") } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","title":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","text":"Installs loads required Julia packages use JuliaBUGS via JuliaCall R.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","text":"","code":"setup_juliaBUGS(   extra_packages = NULL,   verify_package = TRUE,   install_from_dev = FALSE,   verbose = TRUE,   ... )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","text":"extra_packages Character vector additional Julia packages install load. Defaults NULL, meaning core packages handled. verify_package Logical; TRUE, verifies installs missing core packages. Default TRUE. install_from_dev Logical; TRUE, installs JuliaBUGS development repository. Default FALSE. verbose Logical. FALSE ommit message function indicate setup progress. ... Additional arguments passed JuliaCall::julia_setup(), installJulia = TRUE.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","text":"Invisibly returns NULL. function called side effects.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","text":"function checks whether core Julia packages needed running JuliaBUGS installed, installs missing ones, loads current Julia session. Optionally, additional Julia packages can installed loaded specifying via extra_packages. core Julia packages installed (needed) : Serialization LogDensityProblemsAD ReverseDiff AdvancedHMC AbstractMCMC LogDensityProblems MCMCChains DataFrames JuliaBUGS installation, packages loaded Julia session using using. additional packages provided via extra_packages also installed loaded.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Julia Environment for JuliaBUGS — setup_juliaBUGS","text":"","code":"if (FALSE) { # \\dontrun{ # Setup Julia with core packages only setup_juliaBUGS()  # Setup Julia with additional packages setup_juliaBUGS(extra_packages = c(\"Distributions\", \"Turing\")) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for JuliaBUGS Sampler Output — summary.rjuliabugs","title":"Summary Method for JuliaBUGS Sampler Output — summary.rjuliabugs","text":"Provides summary results JuliaBUGS sampler object, including Markov Chain Monte Carlo (MCMC) settings, summary statistics, optionally quantiles.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for JuliaBUGS Sampler Output — summary.rjuliabugs","text":"","code":"# S3 method for class 'rjuliabugs' summary(object, ...)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for JuliaBUGS Sampler Output — summary.rjuliabugs","text":"object object class rjuliabugs containing reference Markov Chain Monte Carlo (MCMC) sampler Julia. ... Additional optional arguments. Supported options: digits: Integer. Number significant digits display. Default: 4. n_display: Integer. Number rows summary statistics show. Default: 10. get_summary: Logical. TRUE, returns summary statistics output list. Default: FALSE. get_quantiles: Logical. TRUE, returns quantiles output list. Default: FALSE. julia_summary_only: Logical. TRUE, displays Julia summary directly returns NULL invisibly. Default: FALSE.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for JuliaBUGS Sampler Output — summary.rjuliabugs","text":"julia_summary_only = TRUE, value called print message. Otherwise, returns list possibly containing: summary: Data frame summary statistics (get_summary = TRUE). quantiles: Data frame quantiles (get_quantiles = TRUE).","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary Method for JuliaBUGS Sampler Output — summary.rjuliabugs","text":"method wraps Julia's MCMCChains.summarystats MCMCChains.quantile extract display results R using JuliaCall interface. also extracts key MCMC settings like number chains, iterations, samples per chain. printed summary truncated n_display rows.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap Bayesian Updating for Gibbs Sampling (BUGS) Model for Julia — wrap_model_to_juliaBUGS","title":"Wrap Bayesian Updating for Gibbs Sampling (BUGS) Model for Julia — wrap_model_to_juliaBUGS","text":"Wraps Bayesian Updating Gibbs Sampling (BUGS) model string `model = @bugs begin` `end`, already wrapped. useful preparing BUGS models use Julia packages expect specific block structure.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap Bayesian Updating for Gibbs Sampling (BUGS) Model for Julia — wrap_model_to_juliaBUGS","text":"","code":"wrap_model_to_juliaBUGS(model_code)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap Bayesian Updating for Gibbs Sampling (BUGS) Model for Julia — wrap_model_to_juliaBUGS","text":"model_code character string containing body Bayesian Updating Gibbs Sampling (BUGS) model. model already starts `model = @bugs begin` ends `end`, function returns unchanged.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap Bayesian Updating for Gibbs Sampling (BUGS) Model for Julia — wrap_model_to_juliaBUGS","text":"character string BUGS model wrapped properly Julia-compatible syntax.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap Bayesian Updating for Gibbs Sampling (BUGS) Model for Julia — wrap_model_to_juliaBUGS","text":"","code":"if (FALSE) { # \\dontrun{ model_body <- \"   for i in 1:N     r[i] ~ dbin(p[i], n[i])     b[i] ~ dnorm(0.0, tau)     p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])   end   alpha0 ~ dnorm(0.0, 1.0E-6)   tau ~ dgamma(0.001, 0.001)   sigma = 1 / sqrt(tau) \" wrap_model_to_juliaBUGS(model_body) } # }"}]

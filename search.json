[{"path":"https://mateusmaiads.github.io/rjuliabugs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rjuliabugs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"vignette assumes rjuliabugs already correctly installed set . goal provide working example assumption installation functional. detailed installation instructions troubleshooting information, please refer README. installation guide includes following sections: Installing Julia Julia found R found installation issues Using rjuliabugs parallel","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"demonstrate first example, use dataset presented official JuliaBUGS illustration. case concerns proportion seeds germinated 21 plates. work data, need create named list R contains variables required model. Users already familiar fitting models using JAGS Stan recognize structure passing named list data input model. , follow convention. One important disclaimer concerns definition use numeric values, particularly integers. specifying integer data list, make sure written decimal point. example, variable like N (e.g., total number plates) defined 21.0 instead 21, JuliaCall automatically convert Float, may lead error model expects Integer. Always use strict integer values required model. Inspecting closely element r[] number germinated seeds n[] total number seeds ii-th plate. Let pip_{} probability germination ii-th plate. , model defined : logit(pi)=Œ±0+Œ±1x1i+Œ±2x2i+Œ±12x1ix2i+bibi‚àºùí©(0,œÑ)ri‚àºBinomial(pi,ni) \\begin{aligned} \\text{logit}(p_i) &= \\alpha_0 + \\alpha_1 x_{1i} + \\alpha_2 x_{2i} + \\alpha_{12} x_{1i} x_{2i} + b_i \\\\ b_i &\\sim \\mathcal{N}(0, \\tau) \\\\ r_i &\\sim \\text{Binomial}(p_i, n_i) \\end{aligned} x1ix_{1i} x2ix_{2i} seed type root extract ii-th plate.","code":"data <- list(     r = c(10, 23, 23, 26, 17, 5, 53, 55, 32, 46, 10, 8, 10, 8, 23, 0, 3, 22, 15, 32, 3),     n = c(39, 62, 81, 51, 39, 6, 74, 72, 51, 79, 13, 16, 30, 28, 45, 4, 12, 41, 30, 51, 7),     x1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),     x2 = c(0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),     N = 21 )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"bugs-model","dir":"Articles","previous_headings":"","what":"BUGS model","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"data prepared, can define model using original BUGS syntax. rjuliabugs, write model string R, following structure used R packages interface BUGS-like tools: Users familiar R packages like R2jags, rjags, R2WinBUGS recognize approach: model defined string using BUGS modeling language. users coming Stan (e.g., via rstan cmdstanr), idea similar: model written probabilistic program inside string object, compiled executed backend. syntactic similarity accidental. design choice rjuliabugs, aims allow users reuse models originally written JAGS WinBUGS, taking advantage modern features available Julia‚ÄîHamiltonian Monte Carlo automatic differentiation‚Äîvia JuliaBUGS. also remind users familiar BUGS syntax, syntax-related mistakes lead errors model compilation. additional guidance, see Miscellaneous Notes BUGS JuliaBUGS documentation, well BUGS Developer Manual. example, writing 1.0E-6.0 instead 1.0E-6 syntax error BUGS, even though numerical meaning equivalent. types issues can subtle cause model fail parsing, attention detail writing BUGS code important.","code":"model_def <- \" model {     for (i in 1:N) {         r[i] ~ dbin(p[i], n[i])         b[i] ~ dnorm(0.0, tau)         logit(p[i]) <- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +                        alpha12 * x1[i] * x2[i] + b[i]     }     alpha0 ~ dnorm(0.0, 1.0E-6)     alpha1 ~ dnorm(0.0, 1.0E-6)     alpha2 ~ dnorm(0.0, 1.0E-6)     alpha12 ~ dnorm(0.0, 1.0E-6)     tau ~ dgamma(0.001, 0.001)     sigma <- 1 / sqrt(tau) } \""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"inference-running-the-sampler","dir":"Articles","previous_headings":"","what":"Inference / Running the Sampler","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"data defined model set , can run sampler perform inference. setup HMC sampler uses -U-Turn Sampler (NUTS) target acceptance probability (Œ¥=0.8)(\\delta=0.8) step size adaptation. done using main function, juliaBUGS. example: return MCMC chains, brief inspection can done summary function wish obtain summary statistics saved parameter, can set argument get_summary = TRUE calling summary(). Additionally, include quantiles associated posterior distributions, set get_quantiles = TRUE. inspect summary output format displayed JuliaBUGS, set julia_summary_only = TRUE. return native Julia-style summary. details, see documentation running ?summary.rjuliabugs.","code":"library(rjuliabugs)  posterior <- juliaBUGS(   data = data,   model_def = model_def,   params_to_save = c(\"alpha0\", \"alpha1\", \"alpha2\", \"alpha12\", \"sigma\"),   n_iter = 2000,   n_warmup = 1000,   n_discard = 1000,   n_chain = 4,   use_parallel = FALSE,   n_thin = 1 ) #> Preparing JuliaBUGS setup... DONE! #> Initialising AbstractMCMC.sample()... DONE! # Generating the summary of the code summary(posterior,get_summary = FALSE,get_quantiles = FALSE) #> Summary of JuliaBUGS sampler: #>  #> Iterations        = 3000 #> Number of chains  = 4 #> Number of posterior samples = 2000 #> Thinning parameter = 1 #> Samples per chain = 1001:3000 #>  #> Summary Statistics: #>  #>  parameters      mean      std     mcse ess_bulk ess_tail  rhat ess_per_sec #>         tau 47.229027 119.7687 9.449100    370.8    210.7 1.019          NA #>     alpha12 -0.837213   0.4349 0.007273   3557.3   4261.6 1.000          NA #>      alpha2  1.359454   0.2768 0.004914   3153.7   3699.5 1.001          NA #>      alpha1  0.088658   0.3247 0.005693   3318.4   3740.4 1.002          NA #>      alpha0 -0.555848   0.1978 0.003373   3418.4   3739.6 1.001          NA #>        b[1] -0.194257   0.2613 0.005795   2144.9   3247.8 1.002          NA #>        b[2]  0.009934   0.2214 0.002901   5905.9   4201.3 1.005          NA #>        b[3] -0.198701   0.2381 0.005425   1970.2   3578.5 1.002          NA #>        b[4]  0.277987   0.2653 0.006755   1512.1   3867.1 1.003          NA #>        b[5]  0.116276   0.2426 0.003741   4451.4   5115.0 1.002          NA #>          ... #>   17 rows omitted"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"inspecting-the-posterior-samples","dir":"Articles","previous_headings":"","what":"Inspecting the Posterior Samples","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"sampling done, juliaBUGS function returns object class rjuliabugs. object contains: params Posterior samples, format specified posterior_type. parameters defined saved argument params_to_save. format object depends prior definition argument posterior_type calling juliaBUGS. default \"array\", compatible R libraries work posterior samples, returns 3D numeric array (iterations √ó chains √ó parameters). available types \"rvar\", \"mcmc\", \"draws\". See ?juliaBUGS details. name Character string identifying Julia sampler object. mentioned , rjuliabugs relies heavily JuliaCall integrate R interface Julia. using package, Julia session runs background generates Chains object containing posterior samples, can accessed name argument. name can defined calling juliaBUGS name parameter serves key retrieve fitted sampler. juliaBUGS called multiple times name, rjuliabugs automatically generates new unique name avoid overwriting. delete fitted model object Julia environment, call delete_julia_obj() corresponding name. See ?delete_julia_obj details. sampler Sampler object returned AbstractMCMC.sample. Julia object type \"JuliaObject\". details, see documentation julia_call() JuliaCall package. n_threads Number Julia threads detected. important verify whether Julia properly recognized available threads sampler ran parallel correctly. set parallel = TRUE calling juliaBUGS value one, sampler actually ran sequentially. mcmc List MCMC configuration parameters. includes MCMC-related arguments passed calling juliaBUGS. control Control options used sampler setup. details, see documentation ?juliaBUGS.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"visualizing-posteriors","dir":"Articles","previous_headings":"","what":"Visualizing Posteriors","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"posterior samples obtained, diagnostic visualization tools easily accessible well-known packages bayesplot posterior. full walkthrough visualizations diagnostics, check vignette (currently progress). quick illustration, let‚Äôs observe density plot posteriors traceplots.  traceplots, subset Œ±0\\alpha_{0} œÉ\\sigma parameters:  Similarly, diagnostics also available posterior package:","code":"library(bayesplot)  # Plotting the posterior density for the saved parameters mcmc_areas(   posterior$params,   pars =  c(\"alpha0\", \"alpha1\", \"alpha2\", \"alpha12\", \"sigma\"),   prob = 0.8 ) library(bayesplot)  # Plotting traceplots for alpha0 and sigma mcmc_trace(   x = posterior$params,   pars = c(\"alpha0\", \"sigma\"),   n_warmup = 0,   facet_args = list(nrow = 2) ) library(posterior)  # For other diagnostics, see the help page help(\"diagnostics\", \"posterior\")  # Example: effective sample size posterior::ess_basic(posterior$params[,,\"alpha0\"]) #> [1] 3437.824"},{"path":"https://mateusmaiads.github.io/rjuliabugs/articles/rjuliabugs.html","id":"saving-and-loading-the-rjuliabugs-model","dir":"Articles","previous_headings":"","what":"Saving and loading the rjuliabugs model","title":"Getting Started with rjuliabugs: A Step-by-Step Logistic Regression Example with Random Effects","text":"Lastly, important able save load rjuliabugs model. use save_rjuliabugs() save posterior object , load use load_rjuliabugs()","code":"save_rjuliabugs(rjuliabugs_model = posterior,                 file = \"rjuliabugs_model.rds\",                 chains_file = \"rjuliabugs_chains.jls\") posterior <- load_rjuliabugs(file = \"rjuliabugs_model.rds\")"},{"path":"https://mateusmaiads.github.io/rjuliabugs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mateus Maia. Maintainer.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maia M, Sun X (2025). rjuliabugs: Interface using JuliaBUGS.jl R. R package version 0.1.0, https://mateusmaiads.github.io/rjuliabugs/.","code":"@Manual{,   title = {rjuliabugs: Interface for using JuliaBUGS.jl in R},   author = {Mateus Maia and Xianda Sun},   year = {2025},   note = {R package version 0.1.0},   url = {https://mateusmaiads.github.io/rjuliabugs/}, }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"rjuliabugs-","dir":"","previous_headings":"","what":"Interface for using JuliaBUGS.jl in R","title":"Interface for using JuliaBUGS.jl in R","text":"rjuliabugs R package provides bridge R JuliaBUGS, BUGS-style Bayesian modeling interface developed Julia part Turing.jl probabilistic programming ecosystem. JuliaBUGS allows users define models using familiar BUGS syntax leveraging speed flexibility Julia language. enables automatic translation BUGS code modern probabilistic programs run efficiently advanced inference engines Hamiltonian Monte Carlo (HMC) ‚Äî accessible via Turing.jl. rjuliabugs, R users can run BUGS models/code JuliaBUGS take advantage inference algorithms available Turing.jl, without leaving R environment. provides seamless path adopt faster (including parallelization) flexible sampling methods also allows integration R‚Äôs extensive post-processing ecosystem (e.g., bayesplot, posterior, coda). lowers barrier existing BUGS users adopt modern Bayesian tools without abandoning existing model codebase.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface for using JuliaBUGS.jl in R","text":"can install development version rjuliabugs GitHub : ‚ö†Ô∏è Loading package: loading package using library(rjuliabugs) first time R session, may take longer R packages needs initialize Julia environment JuliaCall::julia_setup(), can time-consuming. Using package first time may also involve installing required Julia libraries JuliaBUGS‚ÄîAbstractMCMC others‚Äîalready installed.","code":"# install.packages(\"remotes\") remotes::install_github(\"MateusMaiaDS/rjuliabugs\")"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"using-rjuliabugs-setup-troubleshooting-parallelization-settingsand-contribution","dir":"","previous_headings":"","what":"Using rjuliabugs: Setup, Troubleshooting, Parallelization Settings,and Contribution","title":"Interface for using JuliaBUGS.jl in R","text":"guidance, rest README summarises FAQ additional instructions installing Julia setting rjuliabugs, troubleshooting, running rjuliabugs parallel. recommend reading following sections: Installing Julia Julia found R found installation issues Using rjuliabugs parallel open-source project, collaboration welcome. details can found : Contributing License Acknowledgements Last, complete documentation working examples details rjuliabugs functionalities, see vignette. See also, JuliaBUGS Documentation,JAGS Source Code.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"installing-julia","dir":"","previous_headings":"","what":"Installing Julia","title":"Interface for using JuliaBUGS.jl in R","text":"recommend installing Julia using juliaup, official Julia version manager. provides reliable maintainable way install, update, manage Julia versions across platforms. Using juliaup preferred downloading Julia manually makes upgrading Julia seamless safe, supports managing multiple versions, ensures compatibility R-Julia integration tools like JuliaCall. install, follow instructions:","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"windows-via-powershell","dir":"","previous_headings":"Installing Julia","what":"Windows (via PowerShell)","title":"Interface for using JuliaBUGS.jl in R","text":"Open PowerShell (Administrator) run: Requires Windows 10/11 winget available.","code":"winget install --id=JuliaLang.Julia -e"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"macos-via-homebrew","dir":"","previous_headings":"Installing Julia","what":"macOS (via Homebrew)","title":"Interface for using JuliaBUGS.jl in R","text":"use Homebrew, run: installs juliaup sets latest stable Julia version default.","code":"brew install juliaup juliaup add release"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"ubuntu-via-apt","dir":"","previous_headings":"Installing Julia","what":"Ubuntu (via APT)","title":"Interface for using JuliaBUGS.jl in R","text":"recent Ubuntu versions, can install via APT: juliaup available via APT system, follow manual installation instructions Juliaup GitHub page.","code":"sudo apt update sudo apt install juliaup juliaup add release"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"verify-installation","dir":"","previous_headings":"Installing Julia > Ubuntu (via APT)","what":"Verify Installation","title":"Interface for using JuliaBUGS.jl in R","text":"installation, open terminal run: start Julia REPL installed version. now ready use Julia rjuliabugs.","code":"julia"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"troubleshooting-juliacall-setup","dir":"","previous_headings":"","what":"Troubleshooting JuliaCall setup","title":"Interface for using JuliaBUGS.jl in R","text":"rjuliabugs package relies JuliaCall package communicate Julia R. Errors may occur Julia properly installed JuliaCall locate Julia binary. common errors include:","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"error-type-julia-not-found","dir":"","previous_headings":"Troubleshooting JuliaCall setup","what":"Error type: ‚ÄúJulia Not Found‚Äù","title":"Interface for using JuliaBUGS.jl in R","text":"JULIA_HOME environment variable tells R find Julia. ‚Äôs set correctly, rjuliabugs able communicate Julia via JuliaCall. Open terminal command prompt. Check JULIA_HOME set running: (Windows PowerShell use: echo $Env:JULIA_HOME) empty incorrect, installed Julia using juliaup, Julia binary typically located : can set environment variable current session : (Windows PowerShell use: $Env:JULIA_HOME=\"$HOME/.juliaup/bin‚Äú) Replace path correct location installation differs (e.g., ‚Äôre Windows, might something like \"C:/Users/YourName/AppData/Local/Programs/Julia-1.x.x/bin\"). make setting permanent (don‚Äôt need set every time): macOS/Linux: Open shell configuration file (e.g., .bashrc, .zshrc) text editor: Add following line end file: Save exit (Ctrl+O, Enter, Ctrl+X nano). reload shell configuration restart terminal: (source ~/.zshrc using zsh) Windows: Search ‚ÄúEnvironment Variables‚Äù Start menu open ‚ÄúEdit system environment variables.‚Äù Click ‚ÄúEnvironment Variables.‚Äù ‚ÄúUser variables‚Äù ‚ÄúSystem variables,‚Äù click ‚ÄúNew‚Ä¶‚Äù Set variable name JULIA_HOME value path Julia‚Äôs binary installed juliaup (e.g., C:\\Users\\your_user\\AppData\\Local\\Microsoft\\WindowsApps). Click OK save dialogs. Restart terminal R session changes take effect. Verify set correctly re-running: (R use: Sys.getenv(\"JULIA_HOME\")) Setting JULIA_HOME correctly ensures JuliaCall can launch Julia, required rjuliabugs function.","code":"echo $JULIA_HOME ~/.juliaup/bin export JULIA_HOME=\"$HOME/.juliaup/bin\" nano ~/.bashrc nano ~/.zshrc export JULIA_HOME=\"$HOME/.juliaup/bin\" source ~/.bashrc echo $JULIA_HOME"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"error-type-r_home-not-found","dir":"","previous_headings":"Troubleshooting JuliaCall setup","what":"Error type: ‚ÄúR_HOME not found‚Äù","title":"Interface for using JuliaBUGS.jl in R","text":"ensure rjuliabugs works correctly, set R_HOME environment variable Julia can locate R installation. Open terminal command prompt. Check R_HOME set running: (Windows PowerShell use echo $Env:R_HOME) empty, open R run: Copy printed R installation path. Set environment variable terminal session : (Windows PowerShell, use: $Env:R_HOME=\"PASTE_YOUR_PATH_HERE\") make setting permanent (applies every time open terminal run R): macOS/Linux: Open shell configuration file text editor (e.g., nano): use zsh: Add line: Save exit (Ctrl+O, Enter, Ctrl+X nano). reload shell configuration restart terminal: (source ~/.zshrc using zsh) Windows: Search ‚ÄúEnvironment Variables‚Äù Start menu open ‚ÄúEdit system environment variables.‚Äù Click ‚ÄúEnvironment Variables.‚Äù ‚ÄúUser variables‚Äù ‚ÄúSystem variables,‚Äù click ‚ÄúNew‚Ä¶‚Äù Set variable name R_HOME value full R path copied. Click OK save dialogs. Restart terminal R session changes take effect. Verify reopening terminal running echo command step 2. ensures Julia, called R via JuliaCall, can find R installation prevents initialization errors rjuliabugs.","code":"echo $R_HOME R.home() export R_HOME=\"PASTE_YOUR_PATH_HERE\" nano ~/.bashrc nano ~/.zshrc export R_HOME=\"PASTE_YOUR_PATH_HERE\" source ~/.bashrc"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"other-installations-issues","dir":"","previous_headings":"Troubleshooting JuliaCall setup","what":"Other installations issues","title":"Interface for using JuliaBUGS.jl in R","text":"Many common installation problems related JuliaCall well documented Troubleshooting Ways Get Help section JuliaCall GitHub page. encounter issues setting rjuliabugs system covered , feel free open issue repository. ‚Äôre happy help!","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"using-rjuliabugs-in-parallel","dir":"","previous_headings":"","what":"Using rjuliabugs in parallel","title":"Interface for using JuliaBUGS.jl in R","text":"JuliaBUGS library Julia supports parallel sampling AbstractMCMC. native Julia session can easily enabled launching Julia -t <n_threads> flag, using multithreaded sampling via rjuliabugs requires additional setup. Specifically, must define environment variable JULIA_NUM_THREADS=n_threads, n_threads number threads (CPU cores) wish use parallel computation. ensures rjuliabugs can properly initialize Julia multithreading support running multiple chains parallel within R session. instructions configure JULIA_NUM_THREADS enable multithreading environment, following: Open terminal command prompt. Check set JULIA_NUM_THREADS set running: (Windows PowerShell use: echo $Env:JULIA_NUM_THREADS) empty incorrectly set, decide many threads want Julia use (e.g., 4), set environment variable terminal session: (Windows PowerShell use: $Env:JULIA_NUM_THREADS=\"4\") make setting permanent (applies every time open R Julia): macOS/Linux: Open shell configuration file (e.g., .bashrc, .zshrc) text editor: Add following line end file: Save exit (Ctrl+O, Enter, Ctrl+X nano). reload shell configuration restart terminal: (source ~/.zshrc using zsh) Windows: Search ‚ÄúEnvironment Variables‚Äù Start menu open ‚ÄúEdit system environment variables.‚Äù Click ‚ÄúEnvironment Variables.‚Äù ‚ÄúUser variables‚Äù ‚ÄúSystem variables,‚Äù click ‚ÄúNew‚Ä¶‚Äù Set variable name JULIA_NUM_THREADS value number threads (e.g., 4). Click OK save dialogs. Restart terminal R session changes take effect. Verify set correctly re-running: (R use: Sys.getenv(\"JULIA_NUM_THREADS\")) Setting JULIA_NUM_THREADS ensures Julia can execute parallel possible running models rjuliabugs.","code":"echo $JULIA_NUM_THREADS export JULIA_NUM_THREADS=4 nano ~/.bashrc nano ~/.zshrc export JULIA_NUM_THREADS=4 source ~/.bashrc echo $JULIA_NUM_THREADS"},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Interface for using JuliaBUGS.jl in R","text":"Contributions welcome! encounter bug feature request, please open issue.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Interface for using JuliaBUGS.jl in R","text":"package licensed MIT License. See LICENSE file details.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Interface for using JuliaBUGS.jl in R","text":"project part Google Summer Code 2025 initiative Turing.jl organization.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert BUGS Model to Julia's `@bugs` Macro Format ‚Äî bugs2juliaBUGS","title":"Convert BUGS Model to Julia's `@bugs` Macro Format ‚Äî bugs2juliaBUGS","text":"Formats BUGS model string Julia's `@bugs(\"\"\"...\"\"\", convert_var_name, true)` syntax, used Julia ecosystem running BUGS models. default, macro converts R-style variable names (e.g., `.b.c`) Julia-style (`a_b_c`). can disable behavior setting `convert_var_name = FALSE`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert BUGS Model to Julia's `@bugs` Macro Format ‚Äî bugs2juliaBUGS","text":"","code":"bugs2juliaBUGS(model_code, convert_var_name = TRUE)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert BUGS Model to Julia's `@bugs` Macro Format ‚Äî bugs2juliaBUGS","text":"model_code character string containing BUGS model. convert_var_name Logical; `TRUE` (default), R-style variable names `.b.c` translated `a_b_c` Julia model. Set `FALSE` preserve original names.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert BUGS Model to Julia's `@bugs` Macro Format ‚Äî bugs2juliaBUGS","text":"character string formatted Julia `@bugs` macro call.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/bugs2juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert BUGS Model to Julia's `@bugs` Macro Format ‚Äî bugs2juliaBUGS","text":"","code":"model <- \"   for i in 1:N     y[i] ~ dnorm(mu, tau)   end   mu ~ dnorm(0.0, 1.0E-6)   tau ~ dgamma(0.001, 0.001) \" bugs2juliaBUGS(model) #> [1] \"model = @bugs(\\\"\\\"\\\"\\nfor i in 1:N\\n    y[i] ~ dnorm(mu, tau)\\n  end\\n  mu ~ dnorm(0.0, 1.0E-6)\\n  tau ~ dgamma(0.001, 0.001)\\n\\\"\\\"\\\", true, true)\" bugs2juliaBUGS(model, convert_var_name = FALSE) #> [1] \"model = @bugs(\\\"\\\"\\\"\\nfor i in 1:N\\n    y[i] ~ dnorm(mu, tau)\\n  end\\n  mu ~ dnorm(0.0, 1.0E-6)\\n  tau ~ dgamma(0.001, 0.001)\\n\\\"\\\"\\\", false, true)\""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure Unique Name for Julia Sampler (Internal) ‚Äî check_sampler_is_defined","title":"Ensure Unique Name for Julia Sampler (Internal) ‚Äî check_sampler_is_defined","text":"Checks whether Julia variable name already defined `Main` module. name exists, appends random characters unique name found.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure Unique Name for Julia Sampler (Internal) ‚Äî check_sampler_is_defined","text":"","code":"check_sampler_is_defined(name)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure Unique Name for Julia Sampler (Internal) ‚Äî check_sampler_is_defined","text":"name character string representing Julia object name.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/check_sampler_is_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure Unique Name for Julia Sampler (Internal) ‚Äî check_sampler_is_defined","text":"unique name currently defined Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Numeric Elements in a List to Integer or Float ‚Äî convert_numeric_types","title":"Convert Numeric Elements in a List to Integer or Float ‚Äî convert_numeric_types","text":"function takes list numeric vectors returns new list numeric element automatically converted either integer (whole number) kept float (numeric). also preserves original names vector elements, .","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Numeric Elements in a List to Integer or Float ‚Äî convert_numeric_types","text":"","code":"convert_numeric_types(data)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Numeric Elements in a List to Integer or Float ‚Äî convert_numeric_types","text":"data list numeric vectors.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Numeric Elements in a List to Integer or Float ‚Äî convert_numeric_types","text":"list structure numeric element coerced appropriate type: integers whole numbers, floats otherwise. Names preserved.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/convert_numeric_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Numeric Elements in a List to Integer or Float ‚Äî convert_numeric_types","text":"","code":"input_list <- list(   a = c(x = 1.0, y = 2.5, z = 3.0),   b = c(foo = 4.0, bar = 5.1),   c = c(6, 7, 8) ) convert_numeric_types(input_list) #> $a #>   x   y   z  #> 1.0 2.5 3.0  #>  #> $b #> foo bar  #> 4.0 5.1  #>  #> $c #> [1] 6 7 8 #>"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an object from the Julia Main environment ‚Äî delete_julia_obj","title":"Delete an object from the Julia Main environment ‚Äî delete_julia_obj","text":"function removes variable object Julia `Main` module using JuliaCall. useful cleaning resetting objects defined Julia environment R.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an object from the Julia Main environment ‚Äî delete_julia_obj","text":"","code":"delete_julia_obj(obj_name)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an object from the Julia Main environment ‚Äî delete_julia_obj","text":"obj_name character string specifying name Julia object deleted. correspond variable symbol previously defined Julia `Main` module.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/delete_julia_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an object from the Julia Main environment ‚Äî delete_julia_obj","text":"","code":"if (FALSE) { # \\dontrun{ JuliaCall::julia_command(\"x = 10\")  # Define a Julia variable delete_julia_obj(\"x\")               # Delete it } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and convert posterior parameters ‚Äî get_params","title":"Extract and convert posterior parameters ‚Äî get_params","text":"function extracts parameters object created `rjuliabugs` converts specified posterior format.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and convert posterior parameters ‚Äî get_params","text":"","code":"get_params(rjuliabugs, params, posterior_type = \"array\")"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and convert posterior parameters ‚Äî get_params","text":"rjuliabugs object containing posterior samples `name` attribute used extract parameters. params character vector specifying parameters extract. **(NOTE: argument unused current function body.)** posterior_type character string specifying desired output format. Options : \"array\", \"rvar\", \"mcmc\", \"draws\".","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and convert posterior parameters ‚Äî get_params","text":"posterior samples converted specified format. return type depends posterior_type: \"array\" 3D array posterior samples. \"rvar\" object class rvar posterior package. \"mcmc\" mcmc mcmc.list object coda package. \"draws\" object class draws_array similar posterior package.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and convert posterior parameters ‚Äî get_params","text":"function assumes get_params_from_name() referenced variables params_to_save n_chain available current environment.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and convert posterior parameters ‚Äî get_params","text":"","code":"if (FALSE) { # \\dontrun{ get_params(rjuliabugs = fit, params = c(\"alpha\", \"beta\"), posterior_type = \"array\") } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","text":"function extracts posterior samples specified parameters Julia `Chains` object (`Turing.jl` package) using `JuliaCall`. function extracts posterior samples specified parameters Julia `Chains` object (`Turing.jl` package) using `JuliaCall`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","text":"","code":"get_params_from_name(params, name)  get_params_from_name(params, name)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","text":"params character vector parameter names (defined Julia model) extract. name character string giving name Julia object current Julia session, must `Chains` object (`MCMCChains.jl` package).","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","text":"numeric matrix rows represent samples columns represent parameters. numeric matrix rows represent samples columns represent parameters.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","text":"supports extracting one parameters returns result numeric matrix R. function builds Julia expression form `Array(chains[:, [:param1, :param2], :])` extract values specified parameters sampler object. result evaluated Julia returned R numeric matrix. function reshapes output one parameter extracted ensure consistent matrix format. supports extracting one parameters returns result numeric matrix R. function builds Julia expression form `Array(chains[:, [:param1, :param2], :])` extract values specified parameters sampler object. result evaluated Julia returned R numeric matrix. function reshapes output one parameter extracted ensure consistent matrix format.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/get_params_from_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Parameter Samples from a Turing.jl MCMCChains Object ‚Äî get_params_from_name","text":"","code":"if (FALSE) { # \\dontrun{ JuliaCall::julia_setup() samples <- get_params(name = \"sampler_juliaBUGS\",params = c(\"alpha\", \"beta\")) head(samples) } # }  if (FALSE) { # \\dontrun{ JuliaCall::julia_setup() JuliaCall::julia_library(\"Turing\") JuliaCall::julia_command(\"... define model and sample into 'chains' ...\") samples <- get_params(c(\"alpha\", \"beta\"), \"chains\") head(samples) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"Executes Hamiltonian Monte Carlo (HMC) sampler Julia R, using model specified Julia BUGS syntax. compiles model, converts data, sets sampler parameters, returns posterior samples various formats. setup HMC sampler uses -U-Turn Sampler (NUTS) target acceptance probability (\\(\\delta\\)=0.8) step size adaptation.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"","code":"juliaBUGS(   data,   model_def,   params_to_save,   name = \"sampler_juliaBUGS\",   n_iter = 2000,   n_warmup = floor(n_iter/2),   n_discard = n_warmup,   n_thin = 1,   n_chain = 1,   use_parallel = TRUE,   posterior_type = \"array\",   force_setup_juliaBUGS = FALSE,   control = NULL,   ... )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"data named list numeric values (integer double). elements must named. model_def character string model definition, either Julia-compatible format BUGS syntax. params_to_save Character vector names model parameters extract sampler output. name Character. Name sampler object created Julia (must valid Julia variable name). n_iter Integer. Total number MCMC iterations. Default 2000. n_warmup Integer. Number iterations used warm-tuning (e.g., adaption steps NUTS). Default `floor(n_iter / 2)`. n_discard Integer. Number initial samples completely discarded. Default `n_warmup`, .e: discard iterations used adaptation steps. n_thin Integer. Thinning interval. Default 1 (thinning). n_chain Integer. Number MCMC chains. Default 1. use_parallel Logical. Whether use `AbstractMCMC.MCMCThreads()` parallel sampling. Default `TRUE`. posterior_type Character. Format posterior samples. One `\"array\"`, `\"rvar\"`, `\"mcmc\"`, `\"draws\"`. Default `\"array\"`. force_setup_juliaBUGS Logical. `TRUE`, forces reinitialization Julia environment via `setup_juliaBUGS()`. Default `FALSE`. control Optional list control parameters. Supported entries: `data_convert_int` Logical. `TRUE`, coerces numeric values integers possible. Default `TRUE`. `convert_var_name` Logical. `TRUE`, automatically renames variables BUGS model. Default `FALSE`. `julia_model` Logical. `TRUE`, assumes model already Julia format. Default `FALSE`. ... Additional arguments passed `setup_juliaBUGS()`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"object class `\"rjuliabugs\"` containing: params Posterior samples, format specified `posterior_type`. name Character string identifying Julia sampler object. sampler Sampler object returned `AbstractMCMC.sample`. n_threads Number Julia threads detected. mcmc List MCMC configuration parameters. control Control options used sampler setup.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"function relies Julia packages `LogDensityProblems`, `AdvancedHMC`, `AbstractMCMC`. Gradients computed via `ReverseDiff`. model compiled sampling. `posterior_type` argument determines return format: `\"array\"`: 3D numeric array (iterations √ó chains √ó parameters). `\"rvar\"`: `posterior::rvar` object. `\"mcmc\"`: `coda::mcmc` (single chain) `mcmc.list` (multiple chains). `\"draws\"`: `posterior::draws_array`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"must call `setup_juliaBUGS()` least using function. parallel sampling requested one Julia thread available, warning issued sampling run serially.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a Julia HMC Sampler for a BUGS-like Probabilistic Model ‚Äî juliaBUGS","text":"","code":"if (FALSE) { # \\dontrun{ model_def <- \"model = @model ... end\" data <- list(N = 10, x = rnorm(10)) result <- juliaBUGS(   data = data,   model_def = model_def,   params_to_save = c(\"mu\"),   name = \"my_sampler\" ) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","title":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","text":"function wraps `JuliaCall::julia_assign` assign value R Julia variable, explicitly casts variable `Integer` type Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","text":"","code":"julia_assign_int(x, value)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","text":"x character string. name Julia variable assign value . value R object assign Julia variable. passed Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","text":"Invisibly returns `NULL`. main effect side-effects Julia session.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","text":"function first assigns value R variable named `x` Julia session using `JuliaCall::julia_assign`. forces Julia cast variable `Integer` type using Julia's `Integer()` constructor. Note: function assumes `value` provided compatible Julia's `Integer` type. , error thrown Julia.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/julia_assign_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign an Integer Value to a Julia Variable ‚Äî julia_assign_int","text":"","code":"if (FALSE) { # \\dontrun{ julia_assign_int(\"x\", 3.5)  # Will be cast to 3L in Julia JuliaCall::julia_eval(\"x\")  # Returns 3 (as Integer in Julia) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","title":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","text":"Loads object class `rjuliabugs` `.rds` file restores corresponding Julia sampler object using Julia‚Äôs `Serialization.deserialize`. path linking `Chains` object `Julia` defined function `save_rjuliabugs()` called.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","text":"","code":"load_rjuliabugs(file)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","text":"file character string giving path `.rds` file.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","text":"object class `rjuliabugs`, Julia sampler object loaded current session.   name changed avoid conflict, returned object reflects updated name.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","text":"original sampler name (`name`) already exists active Julia session, new unique name generated avoid overwriting . warning issued indicate name changed. `.rds` file must contain valid `rjuliabugs` object `name` `chains_file` fields defined. function checks sampler name already defined Julia. , unique name generated using check_sampler_is_defined, Julia object loaded name.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/load_rjuliabugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an `rjuliabugs` Object and Restore the Julia State ‚Äî load_rjuliabugs","text":"","code":"if (FALSE) { # \\dontrun{ model <- load_rjuliabugs(\"my_model.rds\") # model$name now contains the (possibly updated) name used in Julia } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an `rjuliabugs` Object and Its Julia State ‚Äî save_rjuliabugs","title":"Save an `rjuliabugs` Object and Its Julia State ‚Äî save_rjuliabugs","text":"Serializes Julia object contained `rjuliabugs` object saves entire object `.rds` file. Julia object saved separately using Julia's `Serialization.serialize`. file path can passed manually, retrieved `chains_file` slot object.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an `rjuliabugs` Object and Its Julia State ‚Äî save_rjuliabugs","text":"","code":"save_rjuliabugs(rjuliabugs_model, file, chains_file = NULL)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an `rjuliabugs` Object and Its Julia State ‚Äî save_rjuliabugs","text":"rjuliabugs_model object class `rjuliabugs`, containing least fields `name` (Julia object name string) `chains_file`. file character string giving base name path saving `.rds` file. extension `.rds` missing, appended automatically. chains_file Optional character string giving path Julia object serialized. file name `.jls` extension.  `NULL`, uses `chains_file` field `rjuliabugs_model`.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an `rjuliabugs` Object and Its Julia State ‚Äî save_rjuliabugs","text":"Returns `invisible(NULL)`. Used saving   Julia object R `rjuliabugs` object disk.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/save_rjuliabugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an `rjuliabugs` Object and Its Julia State ‚Äî save_rjuliabugs","text":"","code":"if (FALSE) { # \\dontrun{ save_rjuliabugs(my_model, file = \"my_model\", chains_file = \"chains.jls\") } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","title":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","text":"Installs loads required Julia packages use JuliaBUGS via JuliaCall R.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","text":"","code":"setup_juliaBUGS(   extra_packages = NULL,   verify_package = TRUE,   install_from_dev = FALSE,   ... )"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","text":"extra_packages Character vector additional Julia packages install load. Defaults NULL, meaning core packages handled. verify_package Logical; TRUE, verifies installs missing core packages. Default TRUE. install_from_dev Logical; TRUE, installs JuliaBUGS development repository. Default FALSE. ... Additional arguments passed JuliaCall::julia_setup(), installJulia = TRUE.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","text":"Invisibly returns NULL. function called side effects.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","text":"function checks whether core Julia packages needed running JuliaBUGS installed, installs missing ones, loads current Julia session. Optionally, additional Julia packages can installed loaded specifying via extra_packages. core Julia packages installed (needed) : Serialization LogDensityProblemsAD ReverseDiff AdvancedHMC AbstractMCMC LogDensityProblems MCMCChains DataFrames JuliaBUGS installation, packages loaded Julia session using using. additional packages provided via extra_packages also installed loaded.","code":""},{"path":[]},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/setup_juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Julia Environment for JuliaBUGS ‚Äî setup_juliaBUGS","text":"","code":"if (FALSE) { # \\dontrun{ # Setup Julia with core packages only setup_juliaBUGS()  # Setup Julia with additional packages setup_juliaBUGS(extra_packages = c(\"Distributions\", \"Turing\")) } # }"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for JuliaBUGS Sampler Output ‚Äî summary.rjuliabugs","title":"Summary Method for JuliaBUGS Sampler Output ‚Äî summary.rjuliabugs","text":"Provides summary results JuliaBUGS sampler object, including MCMC settings, summary statistics, optionally quantiles.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for JuliaBUGS Sampler Output ‚Äî summary.rjuliabugs","text":"","code":"# S3 method for class 'rjuliabugs' summary(object, ...)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for JuliaBUGS Sampler Output ‚Äî summary.rjuliabugs","text":"object object class rjuliabugs containing reference Julia MCMC sampler. ... Additional optional arguments. Supported options: digits: Integer. Number significant digits display. Default: 4. n_display: Integer. Number rows summary statistics show. Default: 10. get_summary: Logical. TRUE, returns summary statistics output list. Default: FALSE. get_quantiles: Logical. TRUE, returns quantiles output list. Default: FALSE. julia_summary_only: Logical. TRUE, displays Julia summary directly returns NULL invisibly. Default: FALSE.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for JuliaBUGS Sampler Output ‚Äî summary.rjuliabugs","text":"julia_summary_only = TRUE, returns NULL invisibly. Otherwise, returns list possibly containing: summary: Data frame summary statistics (get_summary = TRUE). quantiles: Data frame quantiles (get_quantiles = TRUE).","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/summary.rjuliabugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary Method for JuliaBUGS Sampler Output ‚Äî summary.rjuliabugs","text":"method wraps Julia's MCMCChains.summarystats MCMCChains.quantile extract display results R using JuliaCall interface. also extracts key MCMC settings like number chains, iterations, samples per chain. printed summary truncated n_display rows.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap BUGS Model for Julia ‚Äî wrap_model_to_juliaBUGS","title":"Wrap BUGS Model for Julia ‚Äî wrap_model_to_juliaBUGS","text":"Wraps BUGS model string `model = @bugs begin` `end`, already wrapped. useful preparing BUGS models use Julia packages expect specific block structure.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap BUGS Model for Julia ‚Äî wrap_model_to_juliaBUGS","text":"","code":"wrap_model_to_juliaBUGS(model_code)"},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap BUGS Model for Julia ‚Äî wrap_model_to_juliaBUGS","text":"model_code character string containing body BUGS model. model already starts `model = @bugs begin` ends `end`, function returns unchanged.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap BUGS Model for Julia ‚Äî wrap_model_to_juliaBUGS","text":"character string BUGS model wrapped properly Julia-compatible syntax.","code":""},{"path":"https://mateusmaiads.github.io/rjuliabugs/reference/wrap_model_to_juliaBUGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap BUGS Model for Julia ‚Äî wrap_model_to_juliaBUGS","text":"","code":"model_body <- \"   for i in 1:N     r[i] ~ dbin(p[i], n[i])     b[i] ~ dnorm(0.0, tau)     p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])   end   alpha0 ~ dnorm(0.0, 1.0E-6)   tau ~ dgamma(0.001, 0.001)   sigma = 1 / sqrt(tau) \" wrap_model_to_juliaBUGS(model_body) #> [1] \"model = @bugs begin\\nfor i in 1:N\\n    r[i] ~ dbin(p[i], n[i])\\n    b[i] ~ dnorm(0.0, tau)\\n    p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])\\n  end\\n  alpha0 ~ dnorm(0.0, 1.0E-6)\\n  tau ~ dgamma(0.001, 0.001)\\n  sigma = 1 / sqrt(tau)\\nend\""}]
